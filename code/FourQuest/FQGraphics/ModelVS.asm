//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbModelTransform
// {
//
//   float4x4 cWorld;                   // Offset:    0 Size:    64
//   float4x4 cWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
//
// }
//
// cbuffer cbSceneTransform
// {
//
//   float4x4 cView;                    // Offset:    0 Size:    64
//   float4x4 cViewProj;                // Offset:   64 Size:    64
//
// }
//
// cbuffer cbMaterial
// {
//
//   struct ModelMaterial
//   {
//       
//       float4x4 TexTransform;         // Offset:    0
//       float4 BaseColor;              // Offset:   64
//       float4 EmissiveColor;          // Offset:   80
//       float4 DissolveOutlineStartColor;// Offset:   96
//       float4 DissolveOutlineEndColor;// Offset:  112
//       float4 DissolveOutlineStartEmissive;// Offset:  128
//       float4 DissolveOutlineEndEmissive;// Offset:  144
//       float4 RimColor;               // Offset:  160
//       float4 InvRimColor;            // Offset:  176
//       float4 BlendScaleOffset;       // Offset:  192
//       float Metalness;               // Offset:  208
//       float Roughness;               // Offset:  212
//       bool UseAlbedoMap;             // Offset:  216
//       bool UseMetalnessMap;          // Offset:  220
//       bool UseRoughnessMap;          // Offset:  224
//       bool UseNormalMap;             // Offset:  228
//       bool UseEmissiveMap;           // Offset:  232
//       float AlphaCutoff;             // Offset:  236
//       float EmissiveIntensity;       // Offset:  240
//       bool UseMetalnessSmoothness;   // Offset:  244
//       bool UseDissolve;              // Offset:  248
//       float OutlineThickness;        // Offset:  252
//       float DissolveCutoff;          // Offset:  256
//       bool bUseRimLight;             // Offset:  260
//       float RimPow;                  // Offset:  264
//       float RimIntensity;            // Offset:  268
//       bool bUseInvRimLight;          // Offset:  272
//       float InvRimPow;               // Offset:  276
//       float InvRimIntensity;         // Offset:  280
//       bool UseMulEmissiveAlpha;      // Offset:  284
//       bool bUseBlendTexture;         // Offset:  288
//       bool bIsBlendBaseColor;        // Offset:  292
//       bool bIsBlendEmissive;         // Offset:  296
//
//   } gModelMaterial;                  // Offset:    0 Size:   300
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cbModelTransform                  cbuffer      NA          NA            cb0      1 
// cbSceneTransform                  cbuffer      NA          NA            cb1      1 
// cbMaterial                        cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyz         2     NONE   float   xyz 
// UV                       0   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 3      w        1     NONE   float      w
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyz         3     NONE   float   xyz 
// TEXCOORD                 1   xy          4     NONE   float   xy  
// TEXCOORD                 2     z         4     NONE   float     z 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xy          7     NONE   float   xy  
// COLOR                    0   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_constantbuffer CB3[13], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xyz
dcl_input v3.xy
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xy
dcl_output o4.z
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xy
dcl_output o8.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- vin.Position.x; v0.y <- vin.Position.y; v0.z <- vin.Position.z; 
//   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
//   v2.x <- vin.TangentL.x; v2.y <- vin.TangentL.y; v2.z <- vin.TangentL.z; 
//   v3.x <- vin.UV.x; v3.y <- vin.UV.y; 
//   v4.x <- vin.Color.x; v4.y <- vin.Color.y; v4.z <- vin.Color.z; v4.w <- vin.Color.w; 
//   o8.x <- <main return value>.Color.x; o8.y <- <main return value>.Color.y; o8.z <- <main return value>.Color.z; o8.w <- <main return value>.Color.w; 
//   o7.x <- <main return value>.BlendUV.x; o7.y <- <main return value>.BlendUV.y; 
//   o6.x <- <main return value>.TangentV.x; o6.y <- <main return value>.TangentV.y; o6.z <- <main return value>.TangentV.z; 
//   o5.x <- <main return value>.NormalV.x; o5.y <- <main return value>.NormalV.y; o5.z <- <main return value>.NormalV.z; 
//   o4.x <- <main return value>.UV.x; o4.y <- <main return value>.UV.y; o4.z <- <main return value>.ClipSpacePosZ; 
//   o3.x <- <main return value>.TangentW.x; o3.y <- <main return value>.TangentW.y; o3.z <- <main return value>.TangentW.z; 
//   o2.x <- <main return value>.NormalW.x; o2.y <- <main return value>.NormalW.y; o2.z <- <main return value>.NormalW.z; 
//   o1.x <- <main return value>.PositionW.x; o1.y <- <main return value>.PositionW.y; o1.z <- <main return value>.PositionW.z; o1.w <- <main return value>.DepthView; 
//   o0.x <- <main return value>.PositionH.x; o0.y <- <main return value>.PositionH.y; o0.z <- <main return value>.PositionH.z; o0.w <- <main return value>.PositionH.w
//
#line 93 "C:\Users\user\Documents\FourQuest\code\FourQuest\FQGraphics\ModelVS.hlsl"
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.PositionH.w
dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.PositionH.x
dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.PositionH.y
dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.PositionH.z

#line 94
dp4 r0.x, r1.xyzw, cb1[6].xyzw  // r0.x <- vout.PositionH.z

#line 115
mov o0.z, r0.x
mov o4.z, r0.x

#line 94
dp4 o0.x, r1.xyzw, cb1[4].xyzw
dp4 o0.y, r1.xyzw, cb1[5].xyzw
dp4 o0.w, r1.xyzw, cb1[7].xyzw

#line 97
mov r1.w, l(1.000000)
dp4 o1.w, r1.xyzw, cb1[2].xyzw

#line 115
mov o1.xyz, r1.xyzx

#line 99
dp3 r0.x, v1.xyzx, cb0[0].xyzx
dp3 r0.y, v1.xyzx, cb0[1].xyzx
dp3 r0.z, v1.xyzx, cb0[2].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- vout.NormalW.x; r0.y <- vout.NormalW.y; r0.z <- vout.NormalW.z

#line 115
mov o2.xyz, r0.xyzx

#line 102
dp3 r1.x, v2.xyzx, cb0[0].xyzx
dp3 r1.y, v2.xyzx, cb0[1].xyzx
dp3 r1.z, v2.xyzx, cb0[2].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- vout.TangentW.x; r1.y <- vout.TangentW.y; r1.z <- vout.TangentW.z

#line 115
mov o3.xyz, r1.xyzx

#line 105
mov r2.xy, v3.xyxx
mov r2.z, l(1.000000)
dp3 o4.x, r2.xyzx, cb3[0].xywx
dp3 o4.y, r2.xyzx, cb3[1].xywx

#line 100
dp3 r2.x, r0.xyzx, cb1[0].xyzx
dp3 r2.y, r0.xyzx, cb1[1].xyzx
dp3 r2.z, r0.xyzx, cb1[2].xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul o5.xyz, r0.xxxx, r2.xyzx

#line 103
dp3 r0.x, r1.xyzx, cb1[0].xyzx
dp3 r0.y, r1.xyzx, cb1[1].xyzx
dp3 r0.z, r1.xyzx, cb1[2].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul o6.xyz, r0.wwww, r0.xyzx

#line 107
mad o7.xy, v3.xyxx, cb3[12].xyxx, cb3[12].zwzz

#line 115
mov o8.xyzw, v4.xyzw
ret 
// Approximately 48 instruction slots used
