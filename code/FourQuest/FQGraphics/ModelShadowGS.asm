//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbShadowTransform
// {
//
//   float4x4 cShadowViewProj[9];       // Offset:    0 Size:   576
//   uint cShadowCount;                 // Offset:  576 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cbShadowTransform                 cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// SV_RenderTargetArrayIndex     0   x           1  RTINDEX    uint   x   
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[37], dynamicIndexed
dcl_input_siv v[3][0].xyzw, position
dcl_temps 3
dcl_inputprimitive triangle 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output_siv o1.x, rendertarget_array_index
dcl_maxout 27
mov r0.x, l(0)
loop 
  uge r0.y, r0.x, cb0[36].x
  breakc_nz r0.y
  mov r0.y, l(0)
  loop 
    uge r0.z, r0.y, l(3)
    breakc_nz r0.z
    imad r0.z, r0.x, l(3), r0.y
    ishl r0.w, r0.z, l(2)
    mov r1.x, l(0)
    loop 
      ige r1.y, r1.x, l(3)
      breakc_nz r1.y
      dp4 r1.y, v[r1.x + 0][0].xyzw, cb0[r0.w + 0].xyzw
      dp4 r1.z, v[r1.x + 0][0].xyzw, cb0[r0.w + 1].xyzw
      dp4 r1.w, v[r1.x + 0][0].xyzw, cb0[r0.w + 2].xyzw
      dp4 r2.x, v[r1.x + 0][0].xyzw, cb0[r0.w + 3].xyzw
      mov o0.x, r1.y
      mov o0.y, r1.z
      mov o0.z, r1.w
      mov o0.w, r2.x
      mov o1.x, r0.z
      emit_stream m0
      iadd r1.x, r1.x, l(1)
    endloop 
    cut_stream m0
    iadd r0.y, r0.y, l(1)
  endloop 
  iadd r0.x, r0.x, l(1)
endloop 
ret 
// Approximately 32 instruction slots used
