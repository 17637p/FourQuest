//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbMaterial
// {
//
//   float4 cBaseColor;                 // Offset:    0 Size:    16
//   float cMetalness;                  // Offset:   16 Size:     4
//   float cRoughness;                  // Offset:   20 Size:     4
//   bool cUseAlbedoMap;                // Offset:   24 Size:     4
//   bool cUseMetalnessMap;             // Offset:   28 Size:     4
//   bool cUseRoughnessMap;             // Offset:   32 Size:     4
//   bool cUseNormalMap;                // Offset:   36 Size:     4
//   bool cUseEmissiveMap;              // Offset:   40 Size:     4
//   bool cUseOpacityMap;               // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// gSamplerAnisotropic               sampler      NA          NA             s0      1 
// gAlbedoMap                        texture  float4          2d             t0      1 
// gMetalnessMap                     texture  float4          2d             t1      1 
// gRoughnessMap                     texture  float4          2d             t2      1 
// gNormalMap                        texture  float4          2d             t3      1 
// gEmissiveMap                      texture  float4          2d             t4      1 
// cbMaterial                        cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 3      w        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyz         3     NONE   float   xyz 
// TEXCOORD                 1   xy          4     NONE   float   xy  
// TEXCOORD                 2     z         4     NONE   float     z 
// TEXCOORD                 4   xyz         5     NONE   float       
// TEXCOORD                 5   xyz         6     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   x           1   TARGET   float   x   
// SV_TARGET                2   x           2   TARGET   float   x   
// SV_TARGET                3   xyzw        3   TARGET   float   xyzw
// SV_TARGET                4   xyzw        4   TARGET   float   xyz 
// SV_TARGET                5   xyzw        5   TARGET   float   xyzw
// SV_TARGET                6   xyzw        6   TARGET   float   xyz 
// SV_TARGET                7   xyzw        7   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_input_ps linear v4.z
dcl_output o0.xyzw
dcl_output o1.x
dcl_output o2.x
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output o6.xyz
dcl_output o7.xyz
dcl_temps 4
if_nz cb0[1].z
  sample_indexable(texture2d)(float,float,float,float) o0.xyzw, v4.xyxx, t0.xyzw, s0
else 
  mov o0.xyzw, cb0[0].xyzw
endif 
if_nz cb0[1].w
  sample_indexable(texture2d)(float,float,float,float) r0.x, v4.xyxx, t1.xyzw, s0
  mov o1.x, r0.x
else 
  mov o1.x, cb0[1].x
endif 
if_nz cb0[2].x
  sample_indexable(texture2d)(float,float,float,float) r0.x, v4.xyxx, t2.xyzw, s0
  mov o2.x, r0.x
else 
  mov o2.x, cb0[1].y
endif 
if_nz cb0[2].y
  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t3.xyzw, s0
  mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r1.x, r0.xyzx, r0.xyzx
  rsq r1.x, r1.x
  mul r0.xyz, r0.xyzx, r1.xxxx
  dp3 r1.x, v2.xyzx, v2.xyzx
  rsq r1.x, r1.x
  mul r1.xyz, r1.xxxx, v2.xyzx
  dp3 r1.w, v3.xyzx, r1.xyzx
  mad r2.xyz, -r1.wwww, r1.xyzx, v3.xyzx
  dp3 r1.w, r2.xyzx, r2.xyzx
  rsq r1.w, r1.w
  mul r2.xyz, r1.wwww, r2.xyzx
  mul r3.xyz, r1.zxyz, r2.yzxy
  mad r3.xyz, r1.yzxy, r2.zxyz, -r3.xyzx
  mul r3.xyz, r0.yyyy, r3.xyzx
  mad r2.xyz, r0.xxxx, r2.xyzx, r3.xyzx
  mad r0.xyz, r0.zzzz, r1.xyzx, r2.xyzx
  dp3 r1.x, r0.xyzx, r0.xyzx
  rsq r1.x, r1.x
  mul r0.xyz, r0.xyzx, r1.xxxx
  mov o3.w, r0.w
else 
  dp3 r0.w, v2.xyzx, v2.xyzx
  rsq r0.w, r0.w
  mul r0.xyz, r0.wwww, v2.xyzx
endif 
add r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul o3.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
add r0.xyz, v2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul o6.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
add r0.xyz, v3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul o7.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
if_nz cb0[2].z
  sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t4.xyzw, s0
  mov o4.xyz, r0.xyzx
else 
  mov o4.xyz, l(0,0,0,0)
endif 
mov o5.xyz, v1.xyzx
mov o5.w, v4.z
ret 
// Approximately 60 instruction slots used
