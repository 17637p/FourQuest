//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbMaterial
// {
//
//   float4 cBaseColor;                 // Offset:    0 Size:    16
//   float cMetalness;                  // Offset:   16 Size:     4
//   float cRoughness;                  // Offset:   20 Size:     4
//   bool cUseAlbedoMap;                // Offset:   24 Size:     4
//   bool cUseMetalnessMap;             // Offset:   28 Size:     4
//   bool cUseRoughnessMap;             // Offset:   32 Size:     4
//   bool cUseNormalMap;                // Offset:   36 Size:     4
//   bool cUseEmissiveMap;              // Offset:   40 Size:     4
//   bool cUseOpacityMap;               // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// gSamplerAnisotropic               sampler      NA          NA             s0      1 
// gAlbedoMap                        texture  float4          2d             t0      1 
// gMetalnessMap                     texture  float4          2d             t1      1 
// gRoughnessMap                     texture  float4          2d             t2      1 
// gNormalMap                        texture  float4          2d             t3      1 
// gEmissiveMap                      texture  float4          2d             t4      1 
// cbMaterial                        cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 3      w        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyz         3     NONE   float   xyz 
// TEXCOORD                 1   xy          4     NONE   float   xy  
// TEXCOORD                 2     z         4     NONE   float     z 
// TEXCOORD                 4   xyz         5     NONE   float       
// TEXCOORD                 5   xyz         6     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   x           1   TARGET   float   x   
// SV_TARGET                2   x           2   TARGET   float   x   
// SV_TARGET                3   xyzw        3   TARGET   float   xyzw
// SV_TARGET                4   xyzw        4   TARGET   float   xyz 
// SV_TARGET                5   xyzw        5   TARGET   float   xyzw
// SV_TARGET                6   xyzw        6   TARGET   float   xyz 
// SV_TARGET                7   xyzw        7   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_input_ps linear v4.z
dcl_output o0.xyzw
dcl_output o1.x
dcl_output o2.x
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output o6.xyz
dcl_output o7.xyz
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- pin.PositionH.x; v0.y <- pin.PositionH.y; v0.z <- pin.PositionH.z; v0.w <- pin.PositionH.w; 
//   v1.x <- pin.PositionW.x; v1.y <- pin.PositionW.y; v1.z <- pin.PositionW.z; 
//   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
//   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
//   v4.x <- pin.UV.x; v4.y <- pin.UV.y; v4.z <- pin.ClipSpacePosZ; 
//   v1.w <- pin.DepthView; 
//   v5.x <- pin.NormalV.x; v5.y <- pin.NormalV.y; v5.z <- pin.NormalV.z; 
//   v6.x <- pin.TangentV.x; v6.y <- pin.TangentV.y; v6.z <- pin.TangentV.z; 
//   o4.w <- <main return value>.Emissive.w; 
//   o6.w <- <main return value>.SourceNormal.w; 
//   o7.w <- <main return value>.SourceTangent.w; o7.x <- <main return value>.SourceTangent.x; o7.y <- <main return value>.SourceTangent.y; o7.z <- <main return value>.SourceTangent.z; 
//   o6.x <- <main return value>.SourceNormal.x; o6.y <- <main return value>.SourceNormal.y; o6.z <- <main return value>.SourceNormal.z; 
//   o5.x <- <main return value>.PositionW.x; o5.y <- <main return value>.PositionW.y; o5.z <- <main return value>.PositionW.z; o5.w <- <main return value>.PositionW.w; 
//   o3.x <- <main return value>.Normal.x; o3.y <- <main return value>.Normal.y; o3.z <- <main return value>.Normal.z; 
//   o4.x <- pout.Emissive.x; o4.y <- pout.Emissive.y; o4.z <- pout.Emissive.z; 
//   o3.w <- pout.Normal.w; 
//   o2.x <- pout.Roughness; 
//   o1.x <- pout.Metalness; 
//   o0.x <- pout.Albedo.x; o0.y <- pout.Albedo.y; o0.z <- pout.Albedo.z; o0.w <- pout.Albedo.w
//
#line 62 "C:\Git\FourQuest\code\FourQuest\FQGraphics\ModelPSDeferred.hlsl"
if_nz cb0[1].z

#line 64
  sample_indexable(texture2d)(float,float,float,float) o0.xyzw, v4.xyxx, t0.xyzw, s0

#line 65
else 

#line 69
  mov o0.xyzw, cb0[0].xyzw  // o0.x <- pout.Albedo.x; o0.y <- pout.Albedo.y; o0.z <- pout.Albedo.z; o0.w <- pout.Albedo.w
endif 

#line 71
if_nz cb0[1].w

#line 73
  sample_indexable(texture2d)(float,float,float,float) r0.x, v4.xyxx, t1.xyzw, s0  // r0.x <- pout.Metalness

#line 74
  mov o1.x, r0.x
else 

#line 78
  mov o1.x, cb0[1].x  // o1.x <- pout.Metalness
endif 

#line 80
if_nz cb0[2].x

#line 82
  sample_indexable(texture2d)(float,float,float,float) r0.x, v4.xyxx, t2.xyzw, s0  // r0.x <- pout.Roughness

#line 83
  mov o2.x, r0.x
else 

#line 87
  mov o2.x, cb0[1].y  // o2.x <- pout.Roughness
endif 

#line 89
if_nz cb0[2].y

#line 91
  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t3.xyzw, s0  // r0.x <- pout.Normal.x; r0.y <- pout.Normal.y; r0.z <- pout.Normal.z; r0.w <- pout.Normal.w

#line 236 "C:\Git\FourQuest\code\FourQuest\FQGraphics\Common.hlsli"
  mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r1.x, r0.xyzx, r0.xyzx
  rsq r1.x, r1.x
  mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- normalT.x; r0.y <- normalT.y; r0.z <- normalT.z

#line 239
  dp3 r1.x, v2.xyzx, v2.xyzx
  rsq r1.x, r1.x
  mul r1.xyz, r1.xxxx, v2.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z

#line 240
  dp3 r1.w, v3.xyzx, r1.xyzx
  mad r2.xyz, -r1.wwww, r1.xyzx, v3.xyzx
  dp3 r1.w, r2.xyzx, r2.xyzx
  rsq r1.w, r1.w
  mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- T.x; r2.y <- T.y; r2.z <- T.z

#line 241
  mul r3.xyz, r1.zxyz, r2.yzxy
  mad r3.xyz, r1.yzxy, r2.zxyz, -r3.xyzx  // r3.x <- B.x; r3.y <- B.y; r3.z <- B.z

#line 246
  mul r3.xyz, r0.yyyy, r3.xyzx
  mad r2.xyz, r0.xxxx, r2.xyzx, r3.xyzx
  mad r0.xyz, r0.zzzz, r1.xyzx, r2.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z

#line 92 "C:\Git\FourQuest\code\FourQuest\FQGraphics\ModelPSDeferred.hlsl"
  dp3 r1.x, r0.xyzx, r0.xyzx
  rsq r1.x, r1.x
  mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- pout.Normal.x; r0.y <- pout.Normal.y; r0.z <- pout.Normal.z

#line 93
  mov o3.w, r0.w
else 

#line 96
  dp3 r0.w, v2.xyzx, v2.xyzx
  rsq r0.w, r0.w
  mul r0.xyz, r0.wwww, v2.xyzx  // r0.x <- pout.Normal.x; r0.y <- pout.Normal.y; r0.z <- pout.Normal.z

#line 97
endif 

#line 99
add r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul o3.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)

#line 100
add r0.xyz, v2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul o6.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)

#line 101
add r0.xyz, v3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul o7.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)

#line 106
if_nz cb0[2].z

#line 108
  sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t4.xyzw, s0  // r0.x <- pout.Emissive.x; r0.y <- pout.Emissive.y; r0.z <- pout.Emissive.z

#line 109
  mov o4.xyz, r0.xyzx
else 

#line 113
  mov o4.xyz, l(0,0,0,0)  // o4.x <- pout.Emissive.x; o4.y <- pout.Emissive.y; o4.z <- pout.Emissive.z
endif 

#line 115
mov o5.xyz, v1.xyzx
mov o5.w, v4.z
ret 
// Approximately 60 instruction slots used
