//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer perFrame
// {
//
//   float4x4 gTexMatrix;               // Offset:    0 Size:    64 [unused]
//   float4x4 gWorldMatrix;             // Offset:   64 Size:    64 [unused]
//   float4x4 gViewMatrix;              // Offset:  128 Size:    64
//   float4x4 gProjMatrix;              // Offset:  192 Size:    64 [unused]
//   float4x4 gInvWVMatrix;             // Offset:  256 Size:    64
//   float2 gDeproject;                 // Offset:  320 Size:     8 [unused]
//   float gNormalThresholdInRadian;    // Offset:  328 Size:     4
//   float gAlphaClipThreshold;         // Offset:  332 Size:     4
//   bool gUseMultiplyAlpha;            // Offset:  336 Size:     4
//   bool gUseAlphaClip;                // Offset:  340 Size:     4
//   bool gUseAlbedoMap;                // Offset:  344 Size:     4
//   bool gUseMetalnessMap;             // Offset:  348 Size:     4
//   bool gUseRoughnessMap;             // Offset:  352 Size:     4
//   bool gUseNormalMap;                // Offset:  356 Size:     4
//   bool gUseEmissiveMap;              // Offset:  360 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// gSamplerAnisotropic               sampler      NA          NA             s2      1 
// gAlbedoMap                        texture  float4          2d             t0      1 
// gMetalnessMap                     texture  float4          2d             t1      1 
// gRoughnessMap                     texture  float4          2d             t2      1 
// gNormalMap                        texture  float4          2d             t3      1 
// gEmissiveMap                      texture  float4          2d             t4      1 
// gPositionWTexture                 texture  float4          2d             t5      1 
// gSourceNormalTexture              texture  float4          2d             t7      1 
// gSourceTangentTexture             texture  float4          2d             t8      1 
// perFrame                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 0   xy          2     NONE   float       
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   x           1   TARGET   float   x   
// SV_Target                2   x           2   TARGET   float   x   
// SV_Target                3   xyzw        3   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[23], immediateIndexed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.xyw
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_output o1.x
dcl_output o2.x
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 6
div r0.xy, v1.xyxx, v1.wwww
mad r0.xy, r0.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t7.xyzw, s2
mad r1.yzw, r1.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
dp3 r0.z, r1.yzwy, r1.yzwy
rsq r0.z, r0.z
mul r1.yzw, r0.zzzz, r1.yyzw
dp3 r0.z, r1.yzwy, v3.xyzx
sincos null, r0.w, cb0[20].z
add r0.z, -r0.w, r0.z
lt r0.z, r0.z, l(0.000000)
discard_nz r0.z
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t5.xyzw, s2
mov r2.w, l(1.000000)
dp4 r3.x, r2.xyzw, cb0[8].xyzw
dp4 r3.y, r2.xyzw, cb0[9].xyzw
dp4 r3.z, r2.xyzw, cb0[10].xyzw
eq r0.z, r3.z, l(0.000000)
discard_nz r0.z
mov r3.w, l(1.000000)
dp4 r2.x, r3.xyzw, cb0[16].xyzw
dp4 r2.y, r3.xyzw, cb0[17].xyzw
dp4 r2.z, r3.xyzw, cb0[18].xyzw
add r3.xyz, -|r2.xyzx|, l(0.500000, 0.500000, 0.500000, 0.000000)
lt r3.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.z, r3.y, r3.x
or r0.z, r3.z, r0.z
discard_nz r0.z
add r0.zw, r2.xxxz, l(0.000000, 0.000000, 0.500000, 0.500000)
if_nz cb0[21].z
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.zwzz, t0.xyzw, s2
else 
  mov r2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif 
ine r3.x, cb0[21].y, l(0)
add r3.y, r2.w, -cb0[20].w
lt r3.y, r3.y, l(0.000000)
and r3.x, r3.x, r3.y
discard_nz r3.x
if_nz cb0[21].w
  sample_indexable(texture2d)(float,float,float,float) r3.x, r0.zwzz, t1.xyzw, s2
  mov o1.x, r3.x
else 
  mov o1.x, l(0)
endif 
if_nz cb0[22].x
  sample_indexable(texture2d)(float,float,float,float) r3.x, r0.zwzz, t2.xyzw, s2
  mov o2.x, r3.x
else 
  mov o2.x, l(0)
endif 
if_nz cb0[22].y
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r0.zwzz, t3.xyzw, s2
  lt r1.x, l(100.000000), r1.x
  discard_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xyxx, t8.xyzw, s2
  mad r4.xyzw, r4.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
  dp4 r0.x, r4.xyzw, r4.xyzw
  rsq r0.x, r0.x
  mul r4.xyz, r0.xxxx, r4.xyzx
  mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r0.x, r3.xyzx, r3.xyzx
  rsq r0.x, r0.x
  mul r3.xyz, r0.xxxx, r3.xyzx
  dp3 r0.x, r4.xyzx, r1.yzwy
  mad r4.xyz, -r0.xxxx, r1.yzwy, r4.xyzx
  dp3 r0.x, r4.xyzx, r4.xyzx
  rsq r0.x, r0.x
  mul r4.xyz, r0.xxxx, r4.xyzx
  mul r5.xyz, r1.wyzw, r4.yzxy
  mad r5.xyz, r1.zwyz, r4.zxyz, -r5.xyzx
  mul r5.xyz, r3.yyyy, r5.xyzx
  mad r3.xyw, r3.xxxx, r4.xyxz, r5.xyxz
  mad r1.xyz, r3.zzzz, r1.yzwy, r3.xywx
  dp3 r0.x, r1.xyzx, r1.xyzx
  rsq r0.x, r0.x
  mad r1.xyz, r1.xyzx, r0.xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
else 
  mov r1.xyz, l(0,0,0,0)
endif 
if_nz cb0[22].z
  sample_indexable(texture2d)(float,float,float,float) o4.xyzw, r0.zwzz, t4.xyzw, s2
else 
  mov o4.xyzw, l(0,0,0,0)
endif 
mul r0.xyz, r2.wwww, r2.xyzx
movc r2.xyz, cb0[21].xxxx, r0.xyzx, r2.xyzx
mov o0.xyzw, r2.xyzw
mov o3.xyz, r1.xyzx
mov o3.w, l(0)
ret 
// Approximately 92 instruction slots used
