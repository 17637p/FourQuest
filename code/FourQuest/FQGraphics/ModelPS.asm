//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbMaterial
// {
//
//   float4 cBaseColor;                 // Offset:    0 Size:    16
//   float cMetalness;                  // Offset:   16 Size:     4
//   float cRoughness;                  // Offset:   20 Size:     4
//   bool cUseAlbedoMap;                // Offset:   24 Size:     4
//   bool cUseMetalnessMap;             // Offset:   28 Size:     4
//   bool cUseRoughnessMap;             // Offset:   32 Size:     4
//   bool cUseNormalMap;                // Offset:   36 Size:     4
//   bool cUseEmissiveMap;              // Offset:   40 Size:     4
//   bool cUseOpacityMap;               // Offset:   44 Size:     4 [unused]
//
// }
//
// cbuffer cbLight
// {
//
//   struct DirectionalLight
//   {
//       
//       float3 color;                  // Offset:    0
//       float intensity;               // Offset:   12
//       float3 direction;              // Offset:   16
//       float pad;                     // Offset:   28
//
//   } directionalLights[3];            // Offset:    0 Size:    96
//   
//   struct PointLight
//   {
//       
//       float3 color;                  // Offset:   96
//       float intensity;               // Offset:  108
//       float3 position;               // Offset:  112
//       float range;                   // Offset:  124
//       float3 attenuation;            // Offset:  128
//       float pad;                     // Offset:  140
//
//   } pointLights[10];                 // Offset:   96 Size:   480
//   
//   struct SpotLight
//   {
//       
//       float3 color;                  // Offset:  576
//       float intensity;               // Offset:  588
//       float3 position;               // Offset:  592
//       float range;                   // Offset:  604
//       float3 direction;              // Offset:  608
//       float spot;                    // Offset:  620
//       float3 attenuation;            // Offset:  624
//       float pad;                     // Offset:  636
//
//   } spotLights[5];                   // Offset:  576 Size:   320
//   uint numOfDirectionalLight;        // Offset:  896 Size:     4
//   uint numOfPointLight;              // Offset:  900 Size:     4
//   uint numOfSpotLight;               // Offset:  904 Size:     4
//   uint isUseIBL;                     // Offset:  908 Size:     4
//   float3 eyePosition;                // Offset:  912 Size:    12
//   float pad2;                        // Offset:  924 Size:     4 [unused]
//
// }
//
// cbuffer cbShadowTransformCascaseEnd
// {
//
//   float4x4 cLightViewProjTex[9];     // Offset:    0 Size:   576
//   float4 cCascadeEnds[3];            // Offset:  576 Size:    48
//   int cShadowCount;                  // Offset:  624 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// gSamplerAnisotropic               sampler      NA          NA             s0      1 
// gLinearClamp                      sampler      NA          NA             s1      1 
// gShadowSampler                  sampler_c      NA          NA             s2      1 
// gAlbedoMap                        texture  float4          2d             t0      1 
// gMetalnessMap                     texture  float4          2d             t1      1 
// gRoughnessMap                     texture  float4          2d             t2      1 
// gNormalMap                        texture  float4          2d             t3      1 
// gEmissiveMap                      texture  float4          2d             t4      1 
// gDiffuseCubMap                    texture  float4        cube             t6      1 
// gSpecularCubeMap                  texture  float4        cube             t7      1 
// gSpecularBRDF_LUT                 texture  float4          2d             t8      1 
// gDirectionalShadowMap             texture  float4     2darray             t9      1 
// cbMaterial                        cbuffer      NA          NA            cb0      1 
// cbLight                           cbuffer      NA          NA            cb1      1 
// cbShadowTransformCascaseEnd       cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyz         3     NONE   float   xyz 
// TEXCOORD                 1   xy          4     NONE   float   xy  
// TEXCOORD                 2     z         4     NONE   float     z 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[3], immediateIndexed
dcl_constantbuffer CB1[58], dynamicIndexed
dcl_constantbuffer CB2[40], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t6
dcl_resource_texturecube (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_input_ps linear v4.z
dcl_output o0.xyzw
dcl_temps 13
if_nz cb0[1].z
  sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t0.xyzw, s0
else 
  mov r0.xyz, cb0[0].xyzx
endif 
if_nz cb0[1].w
  sample_indexable(texture2d)(float,float,float,float) r0.w, v4.xyxx, t1.yzwx, s0
else 
  mov r0.w, cb0[1].x
endif 
if_nz cb0[2].x
  sample_indexable(texture2d)(float,float,float,float) r1.y, v4.xyxx, t2.yxzw, s0
else 
  mov r1.y, cb0[1].y
endif 
dp3 r1.z, v2.xyzx, v2.xyzx
rsq r1.z, r1.z
mul r2.xyz, r1.zzzz, v2.xyzx
if_nz cb0[2].y
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t3.xyzw, s0
  mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r1.z, r3.xyzx, r3.xyzx
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r3.xyzx
  dp3 r1.z, v3.xyzx, r2.xyzx
  mad r4.xyz, -r1.zzzz, r2.xyzx, v3.xyzx
  dp3 r1.z, r4.xyzx, r4.xyzx
  rsq r1.z, r1.z
  mul r4.xyz, r1.zzzz, r4.xyzx
  mul r5.xyz, r2.zxyz, r4.yzxy
  mad r5.xyz, r2.yzxy, r4.zxyz, -r5.xyzx
  mul r5.xyz, r3.yyyy, r5.xyzx
  mad r3.xyw, r3.xxxx, r4.xyxz, r5.xyxz
  mad r3.xyz, r3.zzzz, r2.xyzx, r3.xywx
  dp3 r1.z, r3.xyzx, r3.xyzx
  rsq r1.z, r1.z
  mul r2.xyz, r1.zzzz, r3.xyzx
endif 
if_nz cb0[2].z
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t4.xyzw, s0
else 
  mov r3.xyz, l(0,0,0,0)
endif 
add r4.xyz, -v1.xyzx, cb1[57].xyzx
dp3 r1.z, r4.xyzx, r4.xyzx
rsq r1.z, r1.z
mul r4.xyz, r1.zzzz, r4.xyzx
add r5.xyz, r0.xyzx, l(-0.040000, -0.040000, -0.040000, 0.000000)
mad r5.xyz, r0.wwww, r5.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000)
dp3 r1.z, r2.xyzx, r4.xyzx
max r1.x, r1.z, l(0.000000)
min r1.z, r1.x, l(1.000000)
add r6.xyz, -r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
max r1.w, r1.y, l(0.000010)
mul r1.w, r1.w, r1.w
mul r2.w, r1.w, r1.w
mad r1.w, r1.w, r1.w, l(-1.000000)
add r3.w, r1.y, l(1.000000)
mul r3.w, r3.w, r3.w
mul r4.w, r3.w, l(0.125000)
mad r3.w, -r3.w, l(0.125000), l(1.000000)
mad r5.w, r1.z, r3.w, r4.w
div r5.w, r1.z, r5.w
mov r7.xyz, v1.xyzx
mov r7.w, l(1.000000)
mov r6.w, cb2[39].x
mov r8.xyzw, l(0,0,0,0)
loop 
  uge r9.x, r8.w, cb1[56].x
  breakc_nz r9.x
  ishl r9.x, r8.w, l(1)
  dp3 r9.y, -cb1[r9.x + 1].xyzx, -cb1[r9.x + 1].xyzx
  rsq r9.y, r9.y
  mul r10.xyz, r9.yyyy, -cb1[r9.x + 1].xyzx
  mad r9.yzw, -cb1[r9.x + 1].xxyz, r9.yyyy, r4.xxyz
  dp3 r10.w, r9.yzwy, r9.yzwy
  rsq r10.w, r10.w
  mul r9.yzw, r9.yyzw, r10.wwww
  dp3_sat r10.x, r2.xyzx, r10.xyzx
  dp3_sat r10.y, r2.xyzx, r9.yzwy
  dp3 r9.y, r9.yzwy, r4.xyzx
  max r9.y, r9.y, l(0.000000)
  add r9.y, -r9.y, l(1.000000)
  mul r9.z, r9.y, r9.y
  mul r9.z, r9.z, r9.z
  mul r9.y, r9.z, r9.y
  mad r9.yzw, r6.xxyz, r9.yyyy, r5.xxyz
  mul r10.y, r10.y, r10.y
  mad r10.y, r10.y, r1.w, l(1.000000)
  mul r10.y, r10.y, r10.y
  mul r10.y, r10.y, l(3.141592)
  div r10.y, r2.w, r10.y
  mad r10.z, r10.x, r3.w, r4.w
  div r10.z, r10.x, r10.z
  mul r10.z, r5.w, r10.z
  mul r11.xyz, r9.yzwy, r10.yyyy
  mul r10.yzw, r10.zzzz, r11.xxyz
  mul r11.x, r1.z, r10.x
  mul r11.x, r11.x, l(4.000000)
  max r11.x, r11.x, l(0.000010)
  div r10.yzw, r10.yyzw, r11.xxxx
  add r9.yzw, -r9.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
  mad r9.yzw, r0.wwww, -r9.yyzw, r9.yyzw
  mul r9.yzw, r0.xxyz, r9.yyzw
  mad r9.yzw, r9.yyzw, l(0.000000, 0.318310, 0.318310, 0.318310), r10.yyzw
  mul r9.yzw, r10.xxxx, r9.yyzw
  mul r9.yzw, r9.yyzw, cb1[r9.x + 0].xxyz
  mul r9.xyz, r9.yzwy, cb1[r9.x + 0].wwww
  ult r9.w, r8.w, r6.w
  if_nz r9.w
    mov r9.w, l(2)
    mov r10.x, l(0)
    loop 
      uge r10.y, r10.x, l(3)
      breakc_nz r10.y
      dp4 r10.y, cb2[r8.w + 36].xyzw, icb[r10.x + 0].xyzw
      ge r10.y, r10.y, v4.z
      if_nz r10.y
        mov r9.w, r10.x
        break 
      endif 
      iadd r10.x, r10.x, l(1)
      mov r9.w, l(2)
    endloop 
    imad r10.x, r8.w, l(3), r9.w
    ishl r10.y, r10.x, l(2)
    dp4 r11.x, r7.xyzw, cb2[r10.y + 0].xyzw
    dp4 r11.y, r7.xyzw, cb2[r10.y + 1].xyzw
    dp4 r10.y, r7.xyzw, cb2[r10.y + 2].xyzw
    lt r10.zw, r11.xxxy, l(0.000000, 0.000000, -1.000000, -1.000000)
    lt r12.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r11.xyxx
    or r10.z, r10.z, r12.x
    or r10.z, r10.w, r10.z
    or r10.z, r12.y, r10.z
    lt r10.w, r10.y, l(-1.000000)
    or r10.z, r10.w, r10.z
    lt r10.w, l(1.000000), r10.y
    or r10.z, r10.w, r10.z
    if_z r10.z
      add r12.xy, r11.xyxx, l(-0.000977, -0.000977, 0.000000, 0.000000)
      utof r12.z, r10.x
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.x, r12.xyzx, t9.xxxx, s2, r10.y
      add r12.xy, r11.xyxx, l(0.000000, -0.000977, 0.000000, 0.000000)
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.z, r12.xyzx, t9.xxxx, s2, r10.y
      add r10.x, r10.z, r10.x
      add r12.xy, r11.xyxx, l(0.000977, -0.000977, 0.000000, 0.000000)
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.z, r12.xyzx, t9.xxxx, s2, r10.y
      add r10.x, r10.z, r10.x
      add r12.xy, r11.xyxx, l(-0.000977, 0.000000, 0.000000, 0.000000)
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.z, r12.xyzx, t9.xxxx, s2, r10.y
      add r10.x, r10.z, r10.x
      mov r11.z, r12.z
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.z, r11.xyzx, t9.xxxx, s2, r10.y
      add r10.x, r10.z, r10.x
      add r11.w, r11.x, l(0.000977)
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.z, r11.wyzw, t9.xxxx, s2, r10.y
      add r10.x, r10.z, r10.x
      add r12.xyz, r11.xyzx, l(-0.000977, 0.000977, 0.000000, 0.000000)
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.z, r12.xyzx, t9.xxxx, s2, r10.y
      add r10.x, r10.z, r10.x
      add r12.xyz, r11.xyzx, l(0.000000, 0.000977, 0.000000, 0.000000)
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.z, r12.xyzx, t9.xxxx, s2, r10.y
      add r10.x, r10.z, r10.x
      add r11.xyz, r11.xyzx, l(0.000977, 0.000977, 0.000000, 0.000000)
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.y, r11.xyzx, t9.xxxx, s2, r10.y
      add r10.x, r10.y, r10.x
      mul r10.x, r10.x, l(0.111111)
    else 
      mov r10.x, l(1.000000)
    endif 
    mul r9.xyz, r9.xyzx, r10.xxxx
  endif 
  add r8.xyz, r8.xyzx, r9.xyzx
  iadd r8.w, r8.w, l(1)
endloop 
mov r7.x, l(1.000000)
mov r9.xyz, r8.xyzx
mov r6.w, l(0)
loop 
  uge r7.w, r6.w, cb1[56].y
  breakc_nz r7.w
  imul null, r7.w, r6.w, l(3)
  add r10.xyz, -v1.xyzx, cb1[r7.w + 7].xyzx
  dp3 r7.z, r10.xyzx, r10.xyzx
  sqrt r7.y, r7.z
  ge r8.w, cb1[r7.w + 7].w, r7.y
  if_nz r8.w
    rsq r8.w, r7.z
    mul r11.xyz, r8.wwww, r10.xyzx
    mad r10.xyz, r10.xyzx, r8.wwww, r4.xyzx
    dp3 r8.w, r10.xyzx, r10.xyzx
    rsq r8.w, r8.w
    mul r10.xyz, r8.wwww, r10.xyzx
    dp3_sat r8.w, r2.xyzx, r11.xyzx
    dp3_sat r9.w, r2.xyzx, r10.xyzx
    dp3 r10.x, r10.xyzx, r4.xyzx
    max r10.x, r10.x, l(0.000000)
    add r10.x, -r10.x, l(1.000000)
    mul r10.y, r10.x, r10.x
    mul r10.y, r10.y, r10.y
    mul r10.x, r10.y, r10.x
    mad r10.xyz, r6.xyzx, r10.xxxx, r5.xyzx
    mul r9.w, r9.w, r9.w
    mad r9.w, r9.w, r1.w, l(1.000000)
    mul r9.w, r9.w, r9.w
    mul r9.w, r9.w, l(3.141592)
    div r9.w, r2.w, r9.w
    mad r10.w, r8.w, r3.w, r4.w
    div r10.w, r8.w, r10.w
    mul r10.w, r5.w, r10.w
    mul r11.xyz, r9.wwww, r10.xyzx
    mul r11.xyz, r10.wwww, r11.xyzx
    mul r9.w, r1.z, r8.w
    mul r9.w, r9.w, l(4.000000)
    max r9.w, r9.w, l(0.000010)
    div r11.xyz, r11.xyzx, r9.wwww
    add r10.xyz, -r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r10.xyz, r0.wwww, -r10.xyzx, r10.xyzx
    mul r10.xyz, r0.xyzx, r10.xyzx
    mad r10.xyz, r10.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000), r11.xyzx
    mul r10.xyz, r8.wwww, r10.xyzx
    mul r10.xyz, r10.xyzx, cb1[r7.w + 6].xyzx
    mul r10.xyz, r10.xyzx, cb1[r7.w + 6].wwww
    dp3 r7.y, cb1[r7.w + 8].xyzx, r7.xyzx
    div r7.y, l(1.000000, 1.000000, 1.000000, 1.000000), r7.y
    mul r7.yzw, r7.yyyy, r10.xxyz
  else 
    mov r7.yzw, l(0,0,0,0)
  endif 
  add r9.xyz, r7.yzwy, r9.xyzx
  iadd r6.w, r6.w, l(1)
endloop 
mov r7.x, l(1.000000)
mov r8.xyz, r9.xyzx
mov r6.w, l(0)
loop 
  uge r7.w, r6.w, cb1[56].z
  breakc_nz r7.w
  ishl r7.w, r6.w, l(2)
  add r10.xyz, -v1.xyzx, cb1[r7.w + 37].xyzx
  dp3 r7.z, r10.xyzx, r10.xyzx
  sqrt r7.y, r7.z
  ge r8.w, cb1[r7.w + 37].w, r7.y
  if_nz r8.w
    rsq r8.w, r7.z
    mul r11.xyz, r8.wwww, r10.xyzx
    mad r10.xyz, r10.xyzx, r8.wwww, r4.xyzx
    dp3 r8.w, r10.xyzx, r10.xyzx
    rsq r8.w, r8.w
    mul r10.xyz, r8.wwww, r10.xyzx
    dp3_sat r8.w, r2.xyzx, r11.xyzx
    dp3_sat r9.w, r2.xyzx, r10.xyzx
    dp3 r10.x, r10.xyzx, r4.xyzx
    max r10.x, r10.x, l(0.000000)
    add r10.x, -r10.x, l(1.000000)
    mul r10.y, r10.x, r10.x
    mul r10.y, r10.y, r10.y
    mul r10.x, r10.y, r10.x
    mad r10.xyz, r6.xyzx, r10.xxxx, r5.xyzx
    mul r9.w, r9.w, r9.w
    mad r9.w, r9.w, r1.w, l(1.000000)
    mul r9.w, r9.w, r9.w
    mul r9.w, r9.w, l(3.141592)
    div r9.w, r2.w, r9.w
    mad r10.w, r8.w, r3.w, r4.w
    div r10.w, r8.w, r10.w
    mul r10.w, r5.w, r10.w
    mul r12.xyz, r9.wwww, r10.xyzx
    mul r12.xyz, r10.wwww, r12.xyzx
    mul r9.w, r1.z, r8.w
    mul r9.w, r9.w, l(4.000000)
    max r9.w, r9.w, l(0.000010)
    div r12.xyz, r12.xyzx, r9.wwww
    add r10.xyz, -r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r10.xyz, r0.wwww, -r10.xyzx, r10.xyzx
    mul r10.xyz, r0.xyzx, r10.xyzx
    mad r10.xyz, r10.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000), r12.xyzx
    mul r10.xyz, r8.wwww, r10.xyzx
    mul r10.xyz, r10.xyzx, cb1[r7.w + 36].xyzx
    mul r10.xyz, r10.xyzx, cb1[r7.w + 36].wwww
    dp3 r8.w, -r11.xyzx, cb1[r7.w + 38].xyzx
    max r8.w, r8.w, l(0.000000)
    log r8.w, r8.w
    mul r8.w, r8.w, cb1[r7.w + 38].w
    exp r8.w, r8.w
    dp3 r7.y, cb1[r7.w + 39].xyzx, r7.xyzx
    div r7.y, r8.w, r7.y
    mul r7.yzw, r7.yyyy, r10.xxyz
  else 
    mov r7.yzw, l(0,0,0,0)
  endif 
  add r8.xyz, r7.yzwy, r8.xyzx
  iadd r6.w, r6.w, l(1)
endloop 
if_nz cb1[56].w
  sample_indexable(texturecube)(float,float,float,float) r7.xyz, r2.xyzx, t6.xyzw, s0
  add r1.z, -r1.x, l(1.000000)
  mul r1.w, r1.z, r1.z
  mul r1.w, r1.w, r1.w
  mul r1.z, r1.w, r1.z
  mad r6.xyz, r6.xyzx, r1.zzzz, r5.xyzx
  add r6.xyz, -r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mad r6.xyz, r0.wwww, -r6.xyzx, r6.xyzx
  mul r0.xyz, r0.xyzx, r6.xyzx
  add r0.w, r1.x, r1.x
  mad r2.xyz, r0.wwww, r2.xyzx, -r4.xyzx
  resinfo_indexable(texturecube)(float,float,float,float)_uint r0.w, l(0), t7.xyzw
  utof r0.w, r0.w
  mul r0.w, r0.w, r1.y
  sample_l_indexable(texturecube)(float,float,float,float) r2.xyz, r2.xyzx, t7.xyzw, s0, r0.w
  sample_indexable(texture2d)(float,float,float,float) r1.xy, r1.xyxx, t8.xyzw, s1
  mad r1.xyz, r5.xyzx, r1.xxxx, r1.yyyy
  mul r1.xyz, r2.xyzx, r1.xyzx
  mad r0.xyz, r0.xyzx, r7.xyzx, r1.xyzx
else 
  mov r0.xyz, l(0,0,0,0)
endif 
add r0.xyz, r0.xyzx, r8.xyzx
add o0.xyz, r3.xyzx, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 321 instruction slots used
