//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbParticleObject
// {
//
//   struct ParticleInstance
//   {
//       
//       float4x4 Transform;            // Offset:    0
//       float TimePos;                 // Offset:   64
//       float FrameTime;               // Offset:   68
//       int NumToEmit;                 // Offset:   72
//       float RandomSeed;              // Offset:   76
//
//   } gParticleInstance;               // Offset:    0 Size:    80
//   
//   struct ParticleMain
//   {
//       
//       float4 StartColor[2];          // Offset:   80
//       float2 StartLifeTime;          // Offset:  112
//       float2 StartSpeed;             // Offset:  120
//       float2 StartRotation;          // Offset:  128
//       float2 StartSize;              // Offset:  136
//       float2 GravityModfier;         // Offset:  144
//       float SimulationSpeed;         // Offset:  152
//       int MaxParticleSize;           // Offset:  156
//
//   } gParticleMain;                   // Offset:   80 Size:    80
//   
//   struct ParticleShape
//   {
//       
//       float4x4 Transform;            // Offset:  160
//       float3 Postion;                // Offset:  224
//       float pad0;                    // Offset:  236
//       float3 Rotation;               // Offset:  240
//       float pad1;                    // Offset:  252
//       float3 Scale;                  // Offset:  256
//       float pad2;                    // Offset:  268
//       int ShapeType;                 // Offset:  272
//       int ModeType;                  // Offset:  276
//       float Angle;                   // Offset:  280
//       float Radius;                  // Offset:  284
//       float DountRadius;             // Offset:  288
//       float Arc;                     // Offset:  292
//       float Speed;                   // Offset:  296
//       float Spread;                  // Offset:  300
//       float RadiusThickness;         // Offset:  304
//
//   } gParticleShape;                  // Offset:  160 Size:   148 [unused]
//   
//   struct ParticleVelocityOverLifetime
//   {
//       
//       float3 Velocity;               // Offset:  320
//       float pad0;                    // Offset:  332
//       float3 Orbital;                // Offset:  336
//       float pad1;                    // Offset:  348
//       float3 Offset;                 // Offset:  352
//       float pad2;                    // Offset:  364
//       int bIsUsed;                   // Offset:  368
//
//   } gParticleVelocityOverLifetime;   // Offset:  320 Size:    52
//   
//   struct ParticleLimitVelocityOverLifetime
//   {
//       
//       float Speed;                   // Offset:  384
//       float Dampen;                  // Offset:  388
//       int bIsUsed;                   // Offset:  392
//
//   } gParticleLimitVelocityOverLifetime;// Offset:  384 Size:    12
//   
//   struct ParticleForceOverLifeTime
//   {
//       
//       float3 Force;                  // Offset:  400
//       int bIsUsed;                   // Offset:  412
//
//   } gParticleForceOverLifeTime;      // Offset:  400 Size:    16
//   
//   struct ParticleColorOverLifetime
//   {
//       
//       float4 ColorRatios[8];         // Offset:  416
//       float4 AlphaRatios[8];         // Offset:  544
//       uint AlphaRatioCount;          // Offset:  672
//       uint ColorRatioCount;          // Offset:  676
//       int bIsUsed;                   // Offset:  680
//
//   } gParticleColorOverLifetime;      // Offset:  416 Size:   268
//   
//   struct ParticleSizeOverLifetime
//   {
//       
//       float2 PointA;                 // Offset:  688
//       float2 PointB;                 // Offset:  696
//       float2 PointC;                 // Offset:  704
//       float2 PointD;                 // Offset:  712
//       int bIsUsed;                   // Offset:  720
//
//   } gParticleSizeOverLifetime;       // Offset:  688 Size:    36
//   
//   struct ParticleRotationOverLifetime
//   {
//       
//       float AngularVelocity;         // Offset:  736
//       int bIsUsed;                   // Offset:  740
//
//   } gParticleRotationOverLifetime;   // Offset:  736 Size:     8
//   
//   struct ParticleRender
//   {
//       
//       int bHasTexture;               // Offset:  752
//       int bUseMultiplyAlpha;         // Offset:  756
//       int bUseAlphaClip;             // Offset:  760
//       float AlphaClipThreshold;      // Offset:  764
//
//   } gParticleRender;                 // Offset:  752 Size:    16 [unused]
//
// }
//
// Resource bind info for gParticleBuffer
// {
//
//   struct Particle
//   {
//       
//       float3 PositionW;              // Offset:    0
//       float Size;                    // Offset:   12
//       float3 Velocity;               // Offset:   16
//       float Rotation;                // Offset:   28
//       float4 StartColor;             // Offset:   32
//       float4 Color;                  // Offset:   48
//       float3 EmitterPosition;        // Offset:   64
//       float GravityModfier;          // Offset:   76
//       float LifeTime;                // Offset:   80
//       float Age;                     // Offset:   84
//
//   } $Element;                        // Offset:    0 Size:    88
//
// }
//
// Resource bind info for gDeadList
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gIndexBuffer
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// gParticleBuffer                       UAV  struct         r/w             u0      1 
// gDeadList                             UAV  struct      append             u1      1 
// gIndexBuffer                          UAV  struct     r/w+cnt             u2      1 
// gDrawArgs                             UAV    uint         buf             u3      1 
// cbParticleObject                  cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[47], dynamicIndexed
dcl_uav_structured u0, 88
dcl_uav_structured u1, 4
dcl_uav_structured_opc u2, 4
dcl_uav_typed_buffer (uint,uint,uint,uint) u3
dcl_input vThreadID.x
dcl_temps 12
dcl_thread_group 256, 1, 1
if_z vThreadID.x
  store_uav_typed u3.xyzw, l(0,0,0,0), l(0,0,0,0)
  store_uav_typed u3.xyzw, l(1,1,1,1), l(1,1,1,1)
  store_uav_typed u3.xyzw, l(2,2,2,2), l(0,0,0,0)
  store_uav_typed u3.xyzw, l(3,3,3,3), l(0,0,0,0)
  store_uav_typed u3.xyzw, l(4,4,4,4), l(0,0,0,0)
endif 
ld_structured_indexable(structured_buffer, stride=88)(mixed,mixed,mixed,mixed) r0.xyzw, vThreadID.x, l(0), u0.xyzw
ld_structured_indexable(structured_buffer, stride=88)(mixed,mixed,mixed,mixed) r1.xyzw, vThreadID.x, l(16), u0.xyzw
ld_structured_indexable(structured_buffer, stride=88)(mixed,mixed,mixed,mixed) r2.xyzw, vThreadID.x, l(32), u0.xyzw
ld_structured_indexable(structured_buffer, stride=88)(mixed,mixed,mixed,mixed) r3.xyzw, vThreadID.x, l(48), u0.xyzw
ld_structured_indexable(structured_buffer, stride=88)(mixed,mixed,mixed,mixed) r4.xyzw, vThreadID.x, l(64), u0.xyzw
ld_structured_indexable(structured_buffer, stride=88)(mixed,mixed,mixed,mixed) r5.xy, vThreadID.x, l(80), u0.xyxx
lt r5.z, r5.y, r5.x
if_nz r5.z
  mad r5.y, cb1[4].y, cb1[9].z, r5.y
  div r5.z, r5.y, r5.x
  mul r6.xyz, cb1[4].yyyy, cb1[25].xyzx
  mad r6.xyz, r6.xyzx, cb1[9].zzzz, r1.xyzx
  movc r6.xyz, cb1[25].wwww, r6.xyzx, r1.xyzx
  mul r4.w, r4.w, cb1[4].y
  mul r4.w, r4.w, cb1[9].z
  mad r6.xyz, r4.wwww, l(0.000000, -9.810000, 0.000000, 0.000000), r6.xyzx
  dp3 r4.w, r6.xyzx, r6.xyzx
  sqrt r5.w, r4.w
  lt r6.w, cb1[24].x, r5.w
  add r7.x, r5.w, -cb1[24].x
  mad r5.w, -r7.x, cb1[24].y, r5.w
  rsq r4.w, r4.w
  mul r7.xyz, r4.wwww, r6.xyzx
  mul r7.xyz, r5.wwww, r7.xyzx
  movc r7.xyz, r6.wwww, r7.xyzx, r6.xyzx
  movc r1.xyz, cb1[24].zzzz, r7.xyzx, r6.xyzx
  mul r6.xyz, r1.xyzx, cb1[4].yyyy
  mad r0.xyz, r6.xyzx, cb1[9].zzzz, r0.xyzx
  if_nz cb1[23].x
    mul r6.xyz, r5.zzzz, cb1[20].xyzx
    mul r6.xyz, r6.xyzx, cb1[4].yyyy
    mad r6.xyz, r6.xyzx, cb1[9].zzzz, r0.xyzx
    add r4.xyz, r4.xyzx, cb1[22].xyzx
    dp3 r4.w, cb1[21].xyzx, cb1[21].xyzx
    sqrt r5.w, r4.w
    ne r6.w, r5.w, l(0.000000)
    rsq r4.w, r4.w
    mul r7.xyz, r4.wwww, cb1[21].xyzx
    add r8.xyz, -r4.xyzx, r6.xyzx
    mul r4.w, r5.w, cb1[4].y
    mul r4.w, r4.w, cb1[9].z
    mul r4.w, r4.w, l(0.500000)
    sincos r9.x, r10.x, r4.w
    mul r7.xyz, r7.xyzx, r9.xxxx
    mov r7.w, r10.x
    mul r9.xyzw, r7.xyzw, l(-1.000000, -1.000000, -1.000000, 1.000000)
    mul r10.yzw, r8.xxyz, r9.zzxy
    mad r10.yzw, r8.zzxy, r9.xxyz, -r10.yyzw
    mad r10.yzw, r8.yyzx, r9.wwww, r10.yyzw
    dp3 r4.w, r8.xyzx, r9.xyzx
    mul r8.xyz, -r4.wwww, r7.xyzx
    mad r8.xyz, r10.wyzw, r10.xxxx, r8.xyzx
    mul r11.xyz, r7.zxyz, r10.yzwy
    mad r10.yzw, r7.yyzx, r10.zzwy, -r11.xxyz
    add r8.xyz, r8.xyzx, r10.yzwy
    mul r10.yzw, r1.xxyz, r9.zzxy
    mad r10.yzw, r1.zzxy, r9.xxyz, -r10.yyzw
    mad r10.yzw, r1.yyzx, r9.wwww, r10.yyzw
    dp3 r4.w, r1.xyzx, r9.xyzx
    mul r9.xyz, -r4.wwww, r7.xyzx
    mad r9.xyz, r10.wyzw, r10.xxxx, r9.xyzx
    mul r11.xyz, r7.zxyz, r10.yzwy
    mad r7.xyz, r7.yzxy, r10.zwyz, -r11.xyzx
    add r7.xyz, r7.xyzx, r9.xyzx
    add r4.xyz, r4.xyzx, r8.xyzx
    movc r0.xyz, r6.wwww, r4.xyzx, r6.xyzx
    movc r1.xyz, r6.wwww, r7.xyzx, r1.xyzx
  endif 
  mul r4.x, cb1[4].y, cb1[46].x
  mad r4.x, r4.x, cb1[9].z, r1.w
  movc r1.w, cb1[46].y, r4.x, r1.w
  if_nz cb1[42].z
    mov r4.x, l(0)
    loop 
      uge r4.y, r4.x, cb1[42].x
      breakc_nz r4.y
      lt r4.y, r5.z, cb1[r4.x + 34].y
      if_nz r4.y
        break 
      endif 
      iadd r4.x, r4.x, l(1)
    endloop 
    ieq r4.y, r4.x, cb1[42].x
    iadd r4.x, r4.y, r4.x
    if_nz r4.x
      iadd r4.y, r4.x, l(-1)
      add r4.z, r5.z, -cb1[r4.y + 34].y
      add r4.w, -cb1[r4.y + 34].y, cb1[r4.x + 34].y
      div_sat r4.z, r4.z, r4.w
      mov r4.y, cb1[r4.y + 34].x
    else 
      mov r4.yz, l(0,0,1.000000,0)
    endif 
    add r4.x, -r4.y, cb1[r4.x + 34].x
    mad r4.w, r4.z, r4.x, r4.y
    mov r5.w, l(0)
    loop 
      uge r6.x, r5.w, cb1[42].y
      breakc_nz r6.x
      lt r6.x, r5.z, cb1[r5.w + 26].w
      if_nz r6.x
        break 
      endif 
      iadd r5.w, r5.w, l(1)
    endloop 
    ieq r6.x, r5.w, cb1[42].y
    iadd r5.w, r5.w, r6.x
    if_nz r5.w
      iadd r6.x, r5.w, l(-1)
      add r6.y, r5.z, -cb1[r6.x + 26].w
      add r6.z, -cb1[r6.x + 26].w, cb1[r5.w + 26].w
      div_sat r6.y, r6.y, r6.z
      mov r6.xzw, cb1[r6.x + 26].xxyz
    else 
      mov r6.xyzw, l(0,1.000000,0,0)
    endif 
    add r7.xyz, -r6.xzwx, cb1[r5.w + 26].xyzx
    mad r4.xyz, r6.yyyy, r7.xyzx, r6.xzwx
  else 
    mov r4.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  endif 
  mul r3.xyzw, r2.xyzw, r4.xyzw
  add r2.x, -r5.z, l(1.000000)
  mul r2.y, r2.x, r2.x
  mul r2.z, r2.y, r2.x
  mul r2.y, r2.y, r5.z
  mul r2.y, r2.y, cb1[43].z
  mul r2.xy, r2.xyxx, l(3.000000, 3.000000, 0.000000, 0.000000)
  mad r2.y, r2.z, cb1[43].x, r2.y
  mul r2.z, r5.z, r5.z
  mul r2.x, r2.z, r2.x
  mad r2.x, r2.x, cb1[44].x, r2.y
  mul r2.y, r2.z, r5.z
  mad r2.x, r2.y, cb1[44].z, r2.x
  movc r0.w, cb1[45].x, r2.x, r0.w
  lt r2.x, r5.x, r5.y
  if_nz r2.x
    imm_atomic_alloc r2.x, u1
    store_structured u1.x, r2.x, l(0), vThreadID.x
    mov r5.x, l(-1.000000)
  else 
    imm_atomic_alloc r2.x, u2
    store_structured u2.x, r2.x, l(0), vThreadID.x
    atomic_iadd u3, l(0), l(1)
  endif 
endif 
store_structured u0.xyzw, vThreadID.x, l(0), r0.xyzw
store_structured u0.xyzw, vThreadID.x, l(16), r1.xyzw
store_structured u0.xyzw, vThreadID.x, l(48), r3.xyzw
store_structured u0.xy, vThreadID.x, l(80), r5.xyxx
ret 
// Approximately 158 instruction slots used
