//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbParticleObject
// {
//
//   struct ParticleInstance
//   {
//       
//       float4x4 Transform;            // Offset:    0
//       float TimePos;                 // Offset:   64
//       float FrameTime;               // Offset:   68
//       int NumToEmit;                 // Offset:   72
//       float RandomSeed;              // Offset:   76
//
//   } gParticleInstance;               // Offset:    0 Size:    80 [unused]
//   
//   struct ParticleMain
//   {
//       
//       float4 StartColor[2];          // Offset:   80
//       float2 StartLifeTime;          // Offset:  112
//       float2 StartSpeed;             // Offset:  120
//       float2 StartRotation;          // Offset:  128
//       float2 StartSize;              // Offset:  136
//       float2 GravityModfier;         // Offset:  144
//       float SimulationSpeed;         // Offset:  152
//       int MaxParticleSize;           // Offset:  156
//
//   } gParticleMain;                   // Offset:   80 Size:    80 [unused]
//   
//   struct ParticleShape
//   {
//       
//       float4x4 Transform;            // Offset:  160
//       float3 Postion;                // Offset:  224
//       float pad0;                    // Offset:  236
//       float3 Rotation;               // Offset:  240
//       float pad1;                    // Offset:  252
//       float3 Scale;                  // Offset:  256
//       float pad2;                    // Offset:  268
//       int ShapeType;                 // Offset:  272
//       int ModeType;                  // Offset:  276
//       float Angle;                   // Offset:  280
//       float Radius;                  // Offset:  284
//       float DountRadius;             // Offset:  288
//       float Arc;                     // Offset:  292
//       float Speed;                   // Offset:  296
//       float Spread;                  // Offset:  300
//       float RadiusThickness;         // Offset:  304
//
//   } gParticleShape;                  // Offset:  160 Size:   148 [unused]
//   
//   struct ParticleVelocityOverLifetime
//   {
//       
//       float3 Velocity;               // Offset:  320
//       float pad0;                    // Offset:  332
//       float3 Orbital;                // Offset:  336
//       float pad1;                    // Offset:  348
//       float3 Offset;                 // Offset:  352
//       float pad2;                    // Offset:  364
//       int bIsUsed;                   // Offset:  368
//
//   } gParticleVelocityOverLifetime;   // Offset:  320 Size:    52 [unused]
//   
//   struct ParticleLimitVelocityOverLifetime
//   {
//       
//       float Speed;                   // Offset:  384
//       float Dampen;                  // Offset:  388
//       int bIsUsed;                   // Offset:  392
//
//   } gParticleLimitVelocityOverLifetime;// Offset:  384 Size:    12 [unused]
//   
//   struct ParticleForceOverLifeTime
//   {
//       
//       float3 Force;                  // Offset:  400
//       int bIsUsed;                   // Offset:  412
//
//   } gParticleForceOverLifeTime;      // Offset:  400 Size:    16 [unused]
//   
//   struct ParticleColorOverLifetime
//   {
//       
//       float4 ColorRatios[8];         // Offset:  416
//       float4 AlphaRatios[8];         // Offset:  544
//       uint AlphaRatioCount;          // Offset:  672
//       uint ColorRatioCount;          // Offset:  676
//       int bIsUsed;                   // Offset:  680
//
//   } gParticleColorOverLifetime;      // Offset:  416 Size:   268 [unused]
//   
//   struct ParticleSizeOverLifetime
//   {
//       
//       float2 PointA;                 // Offset:  688
//       float2 PointB;                 // Offset:  696
//       float2 PointC;                 // Offset:  704
//       float2 PointD;                 // Offset:  712
//       int bIsUsed;                   // Offset:  720
//
//   } gParticleSizeOverLifetime;       // Offset:  688 Size:    36 [unused]
//   
//   struct ParticleRotationOverLifetime
//   {
//       
//       float AngularVelocity;         // Offset:  736
//       int bIsUsed;                   // Offset:  740
//
//   } gParticleRotationOverLifetime;   // Offset:  736 Size:     8 [unused]
//   
//   struct ParticleRender
//   {
//       
//       int bHasTexture;               // Offset:  752
//       int bUseMultiplyAlpha;         // Offset:  756
//       int bUseAlphaClip;             // Offset:  760
//       float AlphaClipThreshold;      // Offset:  764
//
//   } gParticleRender;                 // Offset:  752 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// gSamClampLinear                   sampler      NA          NA             s1      1 
// gParticleTexture                  texture  float4          2d             t0      1 
// gDepthTexture                     texture  float4          2d             t1      1 
// cbParticleObject                  cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float     z 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[48], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.z, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyw
dcl_output o0.xyzw
dcl_temps 2
div r0.xy, v3.xyxx, v3.wwww
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t1.xyzw, s1
lt r0.x, r0.x, v0.z
discard_nz r0.x
if_nz cb1[47].x
  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s1, l(0.000000)
  log r0.xyzw, r0.xyzw
  mul r0.xyzw, r0.xyzw, l(2.200000, 2.200000, 2.200000, 2.200000)
  exp r0.xyzw, r0.xyzw
else 
  mov r0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif 
mul r1.xyzw, r0.xyzw, v1.xyzw
ine r0.x, cb1[47].z, l(0)
mad r0.y, r0.w, v1.w, -cb1[47].w
lt r0.y, r0.y, l(0.000000)
and r0.x, r0.x, r0.y
discard_nz r0.x
mul r0.xyz, r1.wwww, r1.xyzx
movc o0.xyz, cb1[47].yyyy, r0.xyzx, r1.xyzx
mov o0.w, r1.w
ret 
// Approximately 22 instruction slots used
