#include "GameModuleRegister.h"

#include "../FQReflect/FQReflect.h"
#include "../FQCommon/FQCommonGraphics.h"
#include "GameModuleEnum.h"
#include "GameObject.h"
#include "Transform.h"
#include "Camera.h"
#include "StaticMeshRenderer.h"
#include "SkinnedMeshRenderer.h"
#include "Light.h"
#include "Particle.h"
#include "Decal.h"
#include "Trail.h"
#include "ImageUI.h"
#include "TextUI.h"
#include "Socket.h"
#include "PostProcessing.h"
#include "Sequence.h"
#include "StateEvent.h"

// Physics
#include "Terrain.h"
#include "RigidBody.h"
#include "BoxCollider.h"
#include "SphereCollider.h"
#include "CapsuleCollider.h"
#include "MeshCollider.h"
#include "CharacterController.h"
#include "TerrainCollider.h"
#include "Articulation.h"

//
#include "SoundClip.h"
#include "PrefabResource.h"
#include "PrefabTest.h"
#include "AnimationStateNode.h"
#include "Animator.h"
#include "UVAnimator.h"
#include "MaterialAnimator.h"
#include "LogStateBehaviour.h"

// PathFinding
#include "NavigationAgent.h"
#include "NavigationMeshLoader.h"

void fq::game_module::RegisterMetaData()
{
	using namespace entt::literals;
	using namespace fq::game_module;

	//////////////////////////////////////////////////////////////////////////
	//                            GameObject                                //
	//////////////////////////////////////////////////////////////////////////

	// Tag
	entt::meta<ETag>()
		.prop(fq::reflect::prop::Name, "Tag")
		.conv<std::underlying_type_t<ETag>>()
		.data<ETag::Untagged>("Untagged"_hs) // 0
		.prop(fq::reflect::prop::Name, "Untagged")
		.data<ETag::Camera>("Camera"_hs) // 1
		.prop(fq::reflect::prop::Name, "Camera")
		.data<ETag::Player>("Player"_hs) // 2
		.prop(fq::reflect::prop::Name, "Player")
		.data<ETag::Monster>("Monster"_hs) // 3
		.prop(fq::reflect::prop::Name, "Monster")
		.data<ETag::Obstacle>("Obstacle"_hs) // 4
		.prop(fq::reflect::prop::Name, "Obstacle")
		.data<ETag::Wall>("Wall"_hs) // 5
		.prop(fq::reflect::prop::Name, "Wall")
		.data<ETag::PlayerAttack>("PlayerAttack"_hs) // 6
		.prop(fq::reflect::prop::Name, "PlayerAttack")
		.data<ETag::MonsterAttack>("MonsterAttack"_hs) // 7
		.prop(fq::reflect::prop::Name, "MonsterAttack")
		.data<ETag::Armour>("Armour"_hs) // 8
		.prop(fq::reflect::prop::Name, "Armour")
		.data<ETag::Floor>("Floor"_hs) // 9
		.prop(fq::reflect::prop::Name, "Floor")
		.data<ETag::Soul>("Soul"_hs) // 10
		.prop(fq::reflect::prop::Name, "Soul")
		.data<ETag::Dash>("Dash"_hs) // 11
		.prop(fq::reflect::prop::Name, "Dash")
		.data<ETag::Spawner>("Spawner"_hs) // 12
		.prop(fq::reflect::prop::Name, "Spawner")
		.data<ETag::Goddess>("Goddess"_hs) // 13
		.prop(fq::reflect::prop::Name, "Goddess")
		.data<ETag::Box>("Box"_hs) // 14
		.prop(fq::reflect::prop::Name, "Box")
		.data<ETag::AimAssist>("AimAssist"_hs) // 15
		.prop(fq::reflect::prop::Name, "AimAssist");


	// GameObject
	entt::meta<GameObject>()
		.type("GameObject"_hs)
		.prop(fq::reflect::prop::Name, "GameObject")
		.data<&GameObject::SetName, &GameObject::GetName>("mName"_hs)
		.prop(fq::reflect::prop::Name, "mName")
		.data<&GameObject::SetTag, &GameObject::GetTag>("mTag"_hs)
		.prop(fq::reflect::prop::Name, "mTag");

	// PrefabResource
	entt::meta<PrefabResource>()
		.type("PrefabResource"_hs)
		.prop(fq::reflect::prop::Name, "PrefabResource")
		.data<&PrefabResource::SetPrefabPath, &PrefabResource::GetPrefabPath>("Path"_hs)
		.prop(fq::reflect::prop::Name, "Path")
		.prop(fq::reflect::prop::RelativePath);

	//////////////////////////////////////////////////////////////////////////
	//                            Component                                 //
	//////////////////////////////////////////////////////////////////////////

	// Transform
	entt::meta<Transform>()
		.type("Transform"_hs)
		.prop(fq::reflect::prop::Name, "Transform")
		.prop(fq::reflect::prop::Label, "Miscellaneous")
		.data<&Transform::SetLocalPosition, &Transform::GetLocalPosition>("Position"_hs)
		.prop(fq::reflect::prop::Name, "Position")
		.prop(fq::reflect::prop::Comment, u8"로컬 좌표")
		.data<&Transform::SetLocalRotation, &Transform::GetLocalRotation>("Rotation"_hs)
		.prop(fq::reflect::prop::Name, "Rotation")
		.data<&Transform::SetLocalScale, &Transform::GetLocalScale>("Scale"_hs)
		.prop(fq::reflect::prop::Name, "Scale")
		.base<Component>();

	// Camera
	entt::meta<Camera>()
		.type("Camera"_hs)
		.prop(fq::reflect::prop::Name, "Camera")
		.prop(fq::reflect::prop::Label, "Rendering")
		.data<&Camera::SetFieldOfView, &Camera::GetFieldOfView>("FOV"_hs)
		.prop(fq::reflect::prop::Name, "FOV")
		.prop(fq::reflect::prop::Comment, "0 ~ 180")
		.data<&Camera::SetMainCamera, &Camera::IsMain>("IsMain"_hs)
		.prop(fq::reflect::prop::Name, "IsMain")
		.data<&Camera::SetFarPlain, &Camera::GetFarPlain>("FarPlain"_hs)
		.prop(fq::reflect::prop::Name, "FarPlain")
		.data<&Camera::SetNearPlain, &Camera::GetNearPlain>("NearPlain"_hs)
		.prop(fq::reflect::prop::Name, "NearPlain")
		.base<Component>();

	//////////////////////////////////////////////////////////////////////////
	//                                Mesh                                  //
	//////////////////////////////////////////////////////////////////////////

	entt::meta<fq::graphics::MaterialInstanceInfo>()
		.type("MaterialInstanceInfo"_hs)
		.prop(fq::reflect::prop::Name, "MaterialInstanceInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::graphics::MaterialInstanceInfo::bUseInstanceAlpha>("bUseInstanceAlpha"_hs)
		.prop(fq::reflect::prop::Name, "bUseInstanceAlpha")
		.data<&fq::graphics::MaterialInstanceInfo::Alpha>("Alpha"_hs)
		.prop(fq::reflect::prop::Name, "Alpha")
		.data<&fq::graphics::MaterialInstanceInfo::bUseDissolveCutoff>("bUseDissolveCutoff"_hs)
		.prop(fq::reflect::prop::Name, "bUseDissolveCutoff")
		.data<&fq::graphics::MaterialInstanceInfo::DissolveCutoff>("DissolveCutoff"_hs)
		.prop(fq::reflect::prop::Name, "DissolveCutoff")
		.data<&fq::graphics::MaterialInstanceInfo::bUseRimLight>("bUseRimLight"_hs)
		.prop(fq::reflect::prop::Name, "bUseRimLight")
		.data<&fq::graphics::MaterialInstanceInfo::RimLightColor>("RimLightColor"_hs)
		.prop(fq::reflect::prop::Name, "RimLightColor")
		.data<&fq::graphics::MaterialInstanceInfo::RimPow>("RimPow"_hs)
		.prop(fq::reflect::prop::Name, "RimPow")
		.data<&fq::graphics::MaterialInstanceInfo::RimIntensity>("RimIntensity"_hs)
		.prop(fq::reflect::prop::Name, "RimIntensity")
		.data<&fq::graphics::MaterialInstanceInfo::bUseInvRimLight>("bUseInvRimLight"_hs)
		.prop(fq::reflect::prop::Name, "bUseInvRimLight")
		.data<&fq::graphics::MaterialInstanceInfo::InvRimLightColor>("InvRimLightColor"_hs)
		.prop(fq::reflect::prop::Name, "InvRimLightColor")
		.data<&fq::graphics::MaterialInstanceInfo::InvRimPow>("InvRimPow"_hs)
		.prop(fq::reflect::prop::Name, "InvRimPow")
		.data<&fq::graphics::MaterialInstanceInfo::InvRimIntensity>("InvRimIntensity"_hs)
		.prop(fq::reflect::prop::Name, "InvRimIntensity")
		.data<&fq::graphics::MaterialInstanceInfo::bUseUVScaleOffset>("bUseUVScaleOffset"_hs)
		.prop(fq::reflect::prop::Name, "bUseUVScaleOffset")
		.data<&fq::graphics::MaterialInstanceInfo::UVScale>("UVScale"_hs)
		.prop(fq::reflect::prop::Name, "UVScale")
		.data<&fq::graphics::MaterialInstanceInfo::UVOffset>("UVOffset"_hs)
		.prop(fq::reflect::prop::Name, "UVOffset");

	entt::meta<fq::graphics::MeshObjectInfo>()
		.type("MeshObjectInfo"_hs)
		.prop(fq::reflect::prop::Name, "MeshObjectInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::graphics::MeshObjectInfo::bUseShadow>("UseShadow"_hs)
		.prop(fq::reflect::prop::Comment, u8"그림자 적용 여부")
		.prop(fq::reflect::prop::Name, "UseShadow")
		.data<&fq::graphics::MeshObjectInfo::bUseLightProbe>("UseLightProbe"_hs)
		.prop(fq::reflect::prop::Comment, u8"LightProbe 적용 여부")
		.prop(fq::reflect::prop::Name, "UseLightProbe")
		.data<&fq::graphics::MeshObjectInfo::OutlineColor>("OutlineColor"_hs)
		.prop(fq::reflect::prop::Name, "OutlineColor")
		.data<&fq::graphics::MeshObjectInfo::bIsAppliedDecal>("IsAppliedDecal"_hs)
		.prop(fq::reflect::prop::Comment, u8"데칼 적용 여부")
		.prop(fq::reflect::prop::Name, "IsAppliedDecal");


	// StaticMeshRenderer
	entt::meta<StaticMeshRenderer>()
		.type("StaticMeshRenderer"_hs)
		.prop(fq::reflect::prop::Name, "StaticMeshRenderer")
		.prop(fq::reflect::prop::Label, "Rendering")
		.data<&StaticMeshRenderer::SetModelPath, &StaticMeshRenderer::GetModelPath>("ModelPath"_hs)
		.prop(fq::reflect::prop::Name, "ModelPath")
		.prop(fq::reflect::prop::ReadOnly)
		.prop(fq::reflect::prop::RelativePath)
		.data<&StaticMeshRenderer::SetMeshName, &StaticMeshRenderer::GetMeshName>("MeshName"_hs)
		.prop(fq::reflect::prop::Name, "MeshName")
		.prop(fq::reflect::prop::ReadOnly)
		.data<&StaticMeshRenderer::SetMeshObjectInfomation, &StaticMeshRenderer::GetMeshObjectInfomation>("MeshObjectInfo"_hs)
		.prop(fq::reflect::prop::Name, "MeshObjectInfo")
		.data<&StaticMeshRenderer::SetIsNavigationMeshUsed, &StaticMeshRenderer::GetIsNavigationMeshUsed>("isUsedNavigationMesh"_hs)
		.prop(fq::reflect::prop::Name, "isUsedNavigationMesh")
		.data<&StaticMeshRenderer::SetMaterialPaths, &StaticMeshRenderer::GetMaterialPaths>("MaterialPaths"_hs)
		.prop(fq::reflect::prop::Name, "MaterialPaths")
		.prop(fq::reflect::prop::DragDrop, ".material")
		.prop(fq::reflect::prop::RelativePath)
		.data<&StaticMeshRenderer::SetLightmapUVScaleOffset, &StaticMeshRenderer::GetLightmapUVScaleOffset>("LightmapUVScaleOffset"_hs)
		.prop(fq::reflect::prop::Name, "LightmapUVScaleOffset")
		.data<&StaticMeshRenderer::SetLightmapIndex, &StaticMeshRenderer::GetLightmapIndex>("LightmapIndex"_hs)
		.prop(fq::reflect::prop::Name, "LightmapIndex")
		.data<&StaticMeshRenderer::SetIsStatic, &StaticMeshRenderer::GetIsStatic>("IsStatic"_hs)
		.prop(fq::reflect::prop::Name, "IsStatic")
		.data<&StaticMeshRenderer::SetPrevApplyTransform, &StaticMeshRenderer::GetPrevApplyTransform>("PrevApplyTransform"_hs)
		.prop(fq::reflect::prop::Name, "PrevApplyTransform")
		.prop(fq::reflect::prop::ReadOnly)
		.data<&StaticMeshRenderer::SetIsStatic, &StaticMeshRenderer::GetIsStatic>("IsStatic"_hs)
		.prop(fq::reflect::prop::Name, "IsStatic")
		.data<&StaticMeshRenderer::SetIsRender, &StaticMeshRenderer::GetIsRender>("IsRender"_hs)
		.prop(fq::reflect::prop::Name, "IsRender")
		.data<&StaticMeshRenderer::SetMaterialInstanceInfo, &StaticMeshRenderer::GetMaterialInstanceInfo>("MaterialInstanceInfo"_hs)
		.prop(fq::reflect::prop::Name, "MaterialInstanceInfo")
		.base<Component>();

	// SkinnedMeshRenderer
	entt::meta<SkinnedMeshRenderer>()
		.type("SkinnedMeshRenderer"_hs)
		.prop(fq::reflect::prop::Name, "SkinnedMeshRenderer")
		.prop(fq::reflect::prop::Label, "Rendering")
		.data<&SkinnedMeshRenderer::SetModelPath, &SkinnedMeshRenderer::GetModelPath>("ModelPath"_hs)
		.prop(fq::reflect::prop::Name, "ModelPath")
		.prop(fq::reflect::prop::DragDrop, ".model")
		.prop(fq::reflect::prop::RelativePath)
		.data<&SkinnedMeshRenderer::SetMeshName, &SkinnedMeshRenderer::GetMeshName>("MeshName"_hs)
		.prop(fq::reflect::prop::Name, "MeshName")
		.prop(fq::reflect::prop::ReadOnly)
		.data<&SkinnedMeshRenderer::SetMeshObjectInfomation, &SkinnedMeshRenderer::GetMeshObjectInfomation>("MeshObjectInfo"_hs)
		.prop(fq::reflect::prop::Name, "MeshObjectInfo")
		.data<&SkinnedMeshRenderer::SetMaterialPaths, &SkinnedMeshRenderer::GetMaterialPaths>("MaterialPaths"_hs)
		.prop(fq::reflect::prop::Name, "MaterialPaths")
		.prop(fq::reflect::prop::DragDrop, ".material")
		.prop(fq::reflect::prop::RelativePath)
		.data<&SkinnedMeshRenderer::SetIsRender, &SkinnedMeshRenderer::GetIsRender>("IsRender"_hs)
		.prop(fq::reflect::prop::Name, "IsRender")
		.data<&SkinnedMeshRenderer::SetMaterialInstanceInfo, &SkinnedMeshRenderer::GetMaterialInstanceInfo>("MaterialInstanceInfo"_hs)
		.prop(fq::reflect::prop::Name, "MaterialInstanceInfo")
		.base<Component>();

	//////////////////////////////////////////////////////////////////////////
	//						         UI		                                //
	//////////////////////////////////////////////////////////////////////////

	entt::meta<graphics::UIInfo>()
		.type("UIInfomation"_hs)
		.prop(fq::reflect::prop::Name, "UIInfomation")
		.prop(fq::reflect::prop::POD)
		.data<&graphics::UIInfo::StartX>("StartX"_hs)
		.prop(fq::reflect::prop::Name, "StartX")
		.data<&graphics::UIInfo::StartY>("StartY"_hs)
		.prop(fq::reflect::prop::Name, "StartY")
		.data<&graphics::UIInfo::Width>("Width"_hs)
		.prop(fq::reflect::prop::Name, "Width")
		.data<&graphics::UIInfo::Height>("Height"_hs)
		.prop(fq::reflect::prop::Name, "Height")
		.data<&graphics::UIInfo::Alpha>("Alpha"_hs)
		.prop(fq::reflect::prop::Name, "Alpha")
		.data<&graphics::UIInfo::Layer>("Layer"_hs)
		.prop(fq::reflect::prop::Name, "Layer")
		.data<&graphics::UIInfo::XRatio>("XRatio"_hs)
		.prop(fq::reflect::prop::Name, "XRatio")
		.data<&graphics::UIInfo::YRatio>("YRatio"_hs)
		.prop(fq::reflect::prop::Name, "YRatio")
		.data<&graphics::UIInfo::ImagePath>("ImagePath"_hs)
		.prop(fq::reflect::prop::Name, "ImagePath")
		.prop(fq::reflect::prop::RelativePath)
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg/.dds")
		.data<&graphics::UIInfo::MaskPath>("MaskPath"_hs)
		.prop(fq::reflect::prop::Name, "MaskPath")
		.prop(fq::reflect::prop::RelativePath)
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg/.dds")
		.data<&graphics::UIInfo::RotationAngle>("RotationAngle"_hs)
		.prop(fq::reflect::prop::Name, "RotationAngle")
		.data<&graphics::UIInfo::ScaleX>("ScaleX"_hs)
		.prop(fq::reflect::prop::Name, "ScaleX")
		.data<&graphics::UIInfo::ScaleY>("ScaleY"_hs)
		.prop(fq::reflect::prop::Name, "ScaleY")
		.data<&graphics::UIInfo::isCenter>("IsCenter"_hs)
		.prop(fq::reflect::prop::Name, "IsCenter")
		.data<&graphics::UIInfo::fillDegree>("FillDegree"_hs)
		.prop(fq::reflect::prop::Name, "FillDegree")
		.data<&graphics::UIInfo::Color>("Color"_hs)
		.prop(fq::reflect::prop::Name, "Color")
		.data<&graphics::UIInfo::isRender>("isRender"_hs)
		.prop(fq::reflect::prop::Name, "isRender");

	entt::meta<ImageUI>()
		.type("ImageUI"_hs)
		.prop(fq::reflect::prop::Name, "ImageUI")
		.prop(fq::reflect::prop::Label, "UI")
		.data<&ImageUI::setUIInfomations, &ImageUI::GetUIInfomations>("UIInfomations"_hs)
		.prop(fq::reflect::prop::Name, "UIInfomations")
		.data<&ImageUI::mbIsBindTransform>("IsBindTransform"_hs)
		.prop(fq::reflect::prop::Name, "IsBindTransform")
		.base<Component>();

	entt::meta<fq::graphics::ETextAlign>()
		.prop(fq::reflect::prop::Name, "TextAlign")
		.data<fq::graphics::ETextAlign::LeftTop>("LeftTop"_hs)
		.prop(fq::reflect::prop::Name, "LeftTop")
		.data<fq::graphics::ETextAlign::LeftCenter>("LeftCenter"_hs)
		.prop(fq::reflect::prop::Name, "LeftCenter")
		.data<fq::graphics::ETextAlign::LeftBottom>("LeftBottom"_hs)
		.prop(fq::reflect::prop::Name, "LeftBottom")
		.data<fq::graphics::ETextAlign::CenterTop>("CenterTop"_hs)
		.prop(fq::reflect::prop::Name, "CenterTop")
		.data<fq::graphics::ETextAlign::CenterCenter>("CenterCenter"_hs)
		.prop(fq::reflect::prop::Name, "CenterCenter")
		.data<fq::graphics::ETextAlign::CenterBottom>("CenterBottom"_hs)
		.prop(fq::reflect::prop::Name, "CenterBottom")
		.data<fq::graphics::ETextAlign::RightTop>("RightTop"_hs)
		.prop(fq::reflect::prop::Name, "RightTop")
		.data<fq::graphics::ETextAlign::RightCenter>("RightCenter"_hs)
		.prop(fq::reflect::prop::Name, "RightCenter")
		.data<fq::graphics::ETextAlign::RightBottom>("RightBottom"_hs)
		.prop(fq::reflect::prop::Name, "RightBottom");

	entt::meta<fq::graphics::ETextBoxAlign>()
		.prop(fq::reflect::prop::Name, "TextAlign")
		.data<fq::graphics::ETextBoxAlign::LeftTop>("LeftTop"_hs)
		.prop(fq::reflect::prop::Name, "LeftTop")
		.data<fq::graphics::ETextBoxAlign::CenterCenter>("CenterCenter"_hs)
		.prop(fq::reflect::prop::Name, "CenterCenter");

	entt::meta<graphics::TextInfo>()
		.type("TextInformation"_hs)
		.prop(fq::reflect::prop::Name, "TextInformation")
		.prop(fq::reflect::prop::POD)
		.data<&graphics::TextInfo::Text>("Text"_hs)
		.prop(fq::reflect::prop::Name, "Text")
		.data<&graphics::TextInfo::Width>("Width"_hs)
		.prop(fq::reflect::prop::Name, "Width")
		.data<&graphics::TextInfo::Height>("Height"_hs)
		.prop(fq::reflect::prop::Name, "Height")
		.data<&graphics::TextInfo::Layer>("Layer"_hs)
		.prop(fq::reflect::prop::Name, "Layer")
		.data<&graphics::TextInfo::FontPath>("FontPath"_hs)
		.prop(fq::reflect::prop::Name, "FontPath")
		.data<&graphics::TextInfo::FontSize>("FontSize"_hs)
		.prop(fq::reflect::prop::Name, "FontSize")
		.data<&graphics::TextInfo::FontColor>("FontColor"_hs)
		.prop(fq::reflect::prop::Name, "FontColor")
		.data<&graphics::TextInfo::Align>("Align"_hs)
		.prop(fq::reflect::prop::Name, "Align")
		.data<&graphics::TextInfo::BoxAlign>("BoxAlign"_hs)
		.prop(fq::reflect::prop::Name, "BoxAlign")
		.data<&graphics::TextInfo::IsRender>("IsRender"_hs)
		.prop(fq::reflect::prop::Name, "IsRender");

	entt::meta<TextUI>()
		.type("TextUI"_hs)
		.prop(fq::reflect::prop::Name, "TextUI")
		.prop(fq::reflect::prop::Label, "UI")
		.data<&TextUI::SetTextInfo, &TextUI::GetTextInfo>("TextInformation"_hs)
		.prop(fq::reflect::prop::Name, "TextInformation")
		.base<Component>();

	//////////////////////////////////////////////////////////////////////////
	//                               Light                                  //
	//////////////////////////////////////////////////////////////////////////

	// LightType
	entt::meta<fq::graphics::ELightType>()
		.prop(fq::reflect::prop::Name, "LightType")
		.data<fq::graphics::ELightType::Directional>("Directional"_hs)
		.prop(fq::reflect::prop::Name, "Directional")
		.data<fq::graphics::ELightType::Point>("Point"_hs)
		.prop(fq::reflect::prop::Name, "Point")
		.data<fq::graphics::ELightType::Spot>("Spot"_hs)
		.prop(fq::reflect::prop::Name, "Spot");

	entt::meta<fq::graphics::ELightMode>()
		.prop(fq::reflect::prop::Name, "LightMode")
		.data<fq::graphics::ELightMode::Realtime>("Realtime"_hs)
		.prop(fq::reflect::prop::Name, "Realtime")
		.data<fq::graphics::ELightMode::Mixed>("Mixed"_hs)
		.prop(fq::reflect::prop::Name, "Mixed")
		.data<fq::graphics::ELightMode::Baked>("Baked"_hs)
		.prop(fq::reflect::prop::Name, "Baked");

	// Light 
	entt::meta<Light>()
		.type("Light"_hs)
		.prop(fq::reflect::prop::Name, "Light")
		.prop(fq::reflect::prop::Label, "Rendering")
		.data<&Light::SetLightType, &Light::GetLightType>("Type"_hs)
		.prop(fq::reflect::prop::Name, "Type")
		.data<&Light::SetLightColor, &Light::GetLightColor>("Color"_hs)
		.prop(fq::reflect::prop::Name, "Color")
		.data<&Light::SetIntensity, &Light::GetIntensity>("Intensity"_hs)
		.prop(fq::reflect::prop::Name, "Intensity")
		.data<&Light::SetAttenuation, &Light::GetAttenuation>("Attenuation"_hs)
		.prop(fq::reflect::prop::Name, "Attenuation")
		.prop(fq::reflect::prop::Comment, u8"감쇠 상수 (Point, Spot)")
		.data<&Light::SetRange, &Light::GetRange>("Range"_hs)
		.prop(fq::reflect::prop::Name, "Range")
		.prop(fq::reflect::prop::Comment, u8"거리 (Point, Spot)")
		.data<&Light::SetSpot, &Light::GetSpot>("Spot"_hs)
		.prop(fq::reflect::prop::Name, "Spot")
		.prop(fq::reflect::prop::Comment, u8"Spot 설정 (Spot)")
		.data<&Light::SetShadow, &Light::OnShadow>("OnShadow"_hs)
		.prop(fq::reflect::prop::Name, "OnShadow")
		.prop(fq::reflect::prop::Comment, u8"Directional Light 3개 제한")
		.data<&Light::SetLightMode, &Light::GetLightMode>("LightMode"_hs)
		.prop(fq::reflect::prop::Name, "LightMode")
		.base<Component>();

	//////////////////////////////////////////////////////////////////////////
	//                               Terrain                                //
	//////////////////////////////////////////////////////////////////////////

	// TerrainLayer
	entt::meta<fq::graphics::TerrainLayer>()
		.type("TerrainLayer"_hs)
		.prop(fq::reflect::prop::Name, "TerrainLayer")
		.prop(fq::reflect::prop::POD)
		.data<&fq::graphics::TerrainLayer::BaseColor>("BaseColor"_hs)
		.prop(fq::reflect::prop::Name, "BaseColor")
		.prop(fq::reflect::prop::RelativePath)
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg/.dds")
		.data<&fq::graphics::TerrainLayer::NormalMap>("NormalMap"_hs)
		.prop(fq::reflect::prop::Name, "NormalMap")
		.prop(fq::reflect::prop::RelativePath)
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg/.dds")
		.data<&fq::graphics::TerrainLayer::Metalic>("Metalic"_hs)
		.prop(fq::reflect::prop::Name, "Metalic")
		.data<&fq::graphics::TerrainLayer::Roughness>("Roughness"_hs)
		.prop(fq::reflect::prop::Name, "Roughness")
		.data<&fq::graphics::TerrainLayer::TileSizeX>("TileSizeX"_hs)
		.prop(fq::reflect::prop::Name, "TileSizeX")
		.data<&fq::graphics::TerrainLayer::TileSizeY>("TileSizeY"_hs)
		.prop(fq::reflect::prop::Name, "TileSizeY")
		.data<&fq::graphics::TerrainLayer::TileOffsetX>("TileOffsetX"_hs)
		.prop(fq::reflect::prop::Name, "TileOffsetX")
		.data<&fq::graphics::TerrainLayer::TileOffsetY>("TileOffsetY"_hs)
		.prop(fq::reflect::prop::Name, "TileOffsetY");

	// Terrain
	entt::meta<Terrain>()
		.type("Terrain"_hs)
		.prop(fq::reflect::prop::Name, "Terrain")
		.prop(fq::reflect::prop::Label, "Rendering")
		.data<&Terrain::SetIsUseNavMesh, &Terrain::GetIsUseNavMesh>("IsUseNavMesh"_hs)
		.prop(fq::reflect::prop::Name, "IsUseNavMesh")
		.data<&Terrain::SetWidth, &Terrain::GetWidth>("TerrainWidth"_hs)
		.prop(fq::reflect::prop::Name, "TerrainWidth")
		.data<&Terrain::SetHeight, &Terrain::GetHeight>("TerrainHeight"_hs)
		.prop(fq::reflect::prop::Name, "TerrainHeight")
		.data<&Terrain::SetHeightScale, &Terrain::GetHeightScale>("HeightScale"_hs)
		.prop(fq::reflect::prop::Name, "HeightScale")
		.data<&Terrain::SetHeightMap, &Terrain::GetHeightMap>("HeightMap"_hs)
		.prop(fq::reflect::prop::Name, "HeightMap")
		.prop(fq::reflect::prop::RelativePath)
		.prop(fq::reflect::prop::DragDrop, ".raw")
		.data<&Terrain::SetTextureWidth, &Terrain::GetTextureWidth>("TextureWidth"_hs)
		.prop(fq::reflect::prop::Name, "TextureWidth")
		.data<&Terrain::SetTextureHeight, &Terrain::GetTextureHeight>("TextureHeight"_hs)
		.prop(fq::reflect::prop::Name, "TextureHeight")
		.data<&Terrain::SetAlphaMap, &Terrain::GetAlphaMap>("AlphaMap"_hs)
		.prop(fq::reflect::prop::Name, "AlphaMap")
		.prop(fq::reflect::prop::RelativePath)
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg/.dds")
		.data<&Terrain::SetTerrainLayers, &Terrain::GetTerrainLayers>("Layers"_hs)
		.prop(fq::reflect::prop::Name, "Layers")
		.prop(fq::reflect::prop::Comment, u8"Layer는 4개 제한 그 이상 필요하다면 대화가 필요함")
		.data<&Terrain::SetLightmapUVScaleOffset, &Terrain::GetLightmapUVScaleOffset>("LightmapUVScaleOffset"_hs)
		.prop(fq::reflect::prop::Name, "LightmapUVScaleOffset")
		.data<&Terrain::SetLightmapIndex, &Terrain::GetLightmapIndex>("LightmapIndex"_hs)
		.prop(fq::reflect::prop::Name, "LightmapIndex")
		.data<&Terrain::SetIsStatic, &Terrain::GetIsStatic>("IsStatic"_hs)
		.prop(fq::reflect::prop::Name, "IsStatic")
		.base<Component>();

	//////////////////////////////////////////////////////////////////////////
	//                              Physics                                 //
	//////////////////////////////////////////////////////////////////////////

	// ColliderType Enum
	entt::meta<fq::physics::EColliderType>()
		.type("ColliderType"_hs)
		.prop(fq::reflect::prop::Name, "ColliderType")
		.data<fq::physics::EColliderType::COLLISION>("Collision"_hs)
		.prop(fq::reflect::prop::Name, "Collision")
		.data<fq::physics::EColliderType::TRIGGER>("Trigger"_hs)
		.prop(fq::reflect::prop::Name, "Trigger");

	// BodyType
	entt::meta<RigidBody::EBodyType>()
		.type("ColliderBodyType"_hs)
		.prop(fq::reflect::prop::Name, "ColliderBodyType")
		.data<RigidBody::EBodyType::Static>("Static"_hs)
		.prop(fq::reflect::prop::Name, "Static")
		.data<RigidBody::EBodyType::Dynamic>("Dynamic"_hs)
		.prop(fq::reflect::prop::Name, "Dynamic")
		.data<RigidBody::EBodyType::Kinematic>("Kinematic"_hs)
		.prop(fq::reflect::prop::Name, "Kinematic");

	// Rigid Body
	entt::meta<RigidBody>()
		.type("RigidBody"_hs)
		.prop(fq::reflect::prop::Name, "RigidBody")
		.prop(fq::reflect::prop::Label, "Physcis")
		.data<&RigidBody::SetBodyType, &RigidBody::GetBodyType>("BodyType"_hs)
		.prop(fq::reflect::prop::Name, "BodyType")
		.data<&RigidBody::SetLinearVelocity, &RigidBody::GetLinearVelocity>("LinearVelocity"_hs)
		.prop(fq::reflect::prop::Name, "LinearVelocity")
		.data<&RigidBody::SetAngularVelocity, &RigidBody::GetAngularVelocity>("AgularVelocity"_hs)
		.prop(fq::reflect::prop::Name, "AgularVelocity")
		.base<Component>();

	// BoxCollider
	entt::meta<BoxCollider>()
		.type("BoxCollider"_hs)
		.prop(fq::reflect::prop::Name, "BoxCollider")
		.prop(fq::reflect::prop::Label, "Physcis")
		.data<&BoxCollider::SetType, &BoxCollider::GetType>("Type"_hs)
		.prop(fq::reflect::prop::Name, "Type")
		.data<&BoxCollider::SetExtent, &BoxCollider::GetExtent>("Extent"_hs)
		.prop(fq::reflect::prop::Name, "Extent")
		.prop(fq::reflect::prop::Comment, u8"박스의 크기")
		.data<&BoxCollider::SetOffset, &BoxCollider::GetOffset>("Offset"_hs)
		.prop(fq::reflect::prop::Name, "Offset")
		.data<&BoxCollider::SetStaticFriction, &BoxCollider::GetStaticFriction>("StaticFriction"_hs)
		.prop(fq::reflect::prop::Name, "StaticFriction")
		.data<&BoxCollider::SetDynamicFriction, &BoxCollider::GetDynamicFriction>("DynamicFriction"_hs)
		.prop(fq::reflect::prop::Name, "DynamicFriction")
		.data<&BoxCollider::SetRestituion, &BoxCollider::GetRestituion>("Restitution"_hs)
		.prop(fq::reflect::prop::Name, "Restitution")
		.data<&BoxCollider::SetDensity, &BoxCollider::GetDensity>("Density"_hs)
		.prop(fq::reflect::prop::Name, "Density")
		.base<Component>();

	// SphereCollider
	entt::meta<SphereCollider>()
		.type("SphereCollider"_hs)
		.prop(fq::reflect::prop::Name, "SphereCollider")
		.prop(fq::reflect::prop::Label, "Physcis")
		.data<&SphereCollider::SetType, &SphereCollider::GetType>("Type"_hs)
		.prop(fq::reflect::prop::Name, "Type")
		.data<&SphereCollider::SetRadius, &SphereCollider::GetRadius>("Radius"_hs)
		.prop(fq::reflect::prop::Name, "Radius")
		.data<&SphereCollider::SetOffset, &SphereCollider::GetOffset>("Offset"_hs)
		.prop(fq::reflect::prop::Name, "Offset")
		.data<&SphereCollider::SetStaticFriction, &SphereCollider::GetStaticFriction>("StaticFriction"_hs)
		.prop(fq::reflect::prop::Name, "StaticFriction")
		.data<&SphereCollider::SetDynamicFriction, &SphereCollider::GetDynamicFriction>("DynamicFriction"_hs)
		.prop(fq::reflect::prop::Name, "DynamicFriction")
		.data<&SphereCollider::SetRestituion, &SphereCollider::GetRestituion>("Restitution"_hs)
		.prop(fq::reflect::prop::Name, "Restitution")
		.data<&SphereCollider::SetDensity, &SphereCollider::GetDensity>("Density"_hs)
		.prop(fq::reflect::prop::Name, "Density")
		.base<Component>();

	entt::meta<CapsuleCollider::EDirection>()
		.type("CapsuleDirection"_hs)
		.prop(fq::reflect::prop::Name, "CapsuleDirection")
		.data<CapsuleCollider::EDirection::XAxis>("XAxis"_hs)
		.prop(fq::reflect::prop::Name, "XAxis")
		.data<CapsuleCollider::EDirection::YAxis>("YAxis"_hs)
		.prop(fq::reflect::prop::Name, "YAxis");

	// CapsuleCollider
	entt::meta<CapsuleCollider>()
		.type("CapsuleCollider"_hs)
		.prop(fq::reflect::prop::Name, "CapsuleCollider")
		.prop(fq::reflect::prop::Label, "Physcis")
		.data<&CapsuleCollider::SetType, &CapsuleCollider::GetType>("Type"_hs)
		.prop(fq::reflect::prop::Name, "Type")
		.data<&CapsuleCollider::SetRadius, &CapsuleCollider::GetRadius>("Radius"_hs)
		.prop(fq::reflect::prop::Name, "Radius")
		.data<&CapsuleCollider::SetHalfHegiht, &CapsuleCollider::GetHalfHeight>("HalfHeight"_hs)
		.prop(fq::reflect::prop::Name, "HalfHeight")
		.data<&CapsuleCollider::SetOffset, &CapsuleCollider::GetOffset>("Offset"_hs)
		.prop(fq::reflect::prop::Name, "Offset")
		.data<&CapsuleCollider::SetStaticFriction, &CapsuleCollider::GetStaticFriction>("StaticFriction"_hs)
		.prop(fq::reflect::prop::Name, "StaticFriction")
		.data<&CapsuleCollider::SetDynamicFriction, &CapsuleCollider::GetDynamicFriction>("DynamicFriction"_hs)
		.prop(fq::reflect::prop::Name, "DynamicFriction")
		.data<&CapsuleCollider::SetRestituion, &CapsuleCollider::GetRestituion>("Restitution"_hs)
		.prop(fq::reflect::prop::Name, "Restitution")
		.data<&CapsuleCollider::SetDensity, &CapsuleCollider::GetDensity>("Density"_hs)
		.prop(fq::reflect::prop::Name, "Density")
		.data<&CapsuleCollider::SetDirection, &CapsuleCollider::GetDirection>("Direction"_hs)
		.prop(fq::reflect::prop::Name, "Direction")
		.base<Component>();


	// MeshCollider
	entt::meta<MeshCollider>()
		.type("MeshCollider"_hs)
		.prop(fq::reflect::prop::Name, "MeshCollider")
		.prop(fq::reflect::prop::Label, "Physcis")
		.data<&MeshCollider::SetType, &MeshCollider::GetType>("Type"_hs)
		.prop(fq::reflect::prop::Name, "Type")
		.data<&MeshCollider::SetOffset, &MeshCollider::GetOffset>("Offset"_hs)
		.prop(fq::reflect::prop::Name, "Offset")
		.data<&MeshCollider::SetStaticFriction, &MeshCollider::GetStaticFriction>("StaticFriction"_hs)
		.prop(fq::reflect::prop::Name, "StaticFriction")
		.data<&MeshCollider::SetDynamicFriction, &MeshCollider::GetDynamicFriction>("DynamicFriction"_hs)
		.prop(fq::reflect::prop::Name, "DynamicFriction")
		.data<&MeshCollider::SetRestituion, &MeshCollider::GetRestituion>("Restitution"_hs)
		.prop(fq::reflect::prop::Name, "Restitution")
		.data<&MeshCollider::SetDensity, &MeshCollider::GetDensity>("Density"_hs)
		.prop(fq::reflect::prop::Name, "Density")
		.data<&MeshCollider::SetConvexPolygonLimit, &MeshCollider::GetConvexPolygonLimit>("PolygonLimit"_hs)
		.prop(fq::reflect::prop::Name, "PolygonLimit")
		.base<Component>();

	// MeshCollider
	entt::meta<TerrainCollider>()
		.type("TerrainCollider"_hs)
		.prop(fq::reflect::prop::Name, "TerrainCollider")
		.prop(fq::reflect::prop::Label, "Physcis")
		.base<Component>();

	entt::meta<fq::physics::CharacterControllerInfo>()
		.type("CharacterControllerInfo"_hs)
		.prop(fq::reflect::prop::Name, "CharacterControllerInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::physics::CharacterControllerInfo::height>("Height"_hs)
		.prop(fq::reflect::prop::Name, "Height")
		.prop(fq::reflect::prop::Comment, u8"캐릭터 컨트롤러(캡슐)의 높이")
		.data<&fq::physics::CharacterControllerInfo::radius>("Radius"_hs)
		.prop(fq::reflect::prop::Name, "Radius")
		.prop(fq::reflect::prop::Comment, u8" 캐릭터 컨트롤러(캡슐)의 반지름")
		.data<&fq::physics::CharacterControllerInfo::stepOffset>("StepOffset"_hs)
		.prop(fq::reflect::prop::Name, "StepOffset")
		.prop(fq::reflect::prop::Comment, u8" 캐릭터 컨트롤러가 지나갈 수 있는 ")
		.data<&fq::physics::CharacterControllerInfo::slopeLimit>("SlopeLimit"_hs)
		.prop(fq::reflect::prop::Name, "SlopeLimit")
		.prop(fq::reflect::prop::Comment, u8" 캐릭터가 걸어 올라갈 수 있는 최대 기울기")
		.data<&fq::physics::CharacterControllerInfo::contactOffset>("ContactOffset"_hs)
		.prop(fq::reflect::prop::Name, "ContactOffset")
		.prop(fq::reflect::prop::Comment, u8" 컨트롤러의 접촉 오프셋 : 수치 정밀도 문제를 방지하기 위해 사용합니다.");

	entt::meta<fq::physics::CharacterMovementInfo>()
		.type("CharacterMovementInfo"_hs)
		.prop(fq::reflect::prop::Name, "CharacterMovementInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::physics::CharacterMovementInfo::maxSpeed>("MaxSpeed"_hs)
		.prop(fq::reflect::prop::Name, "MaxSpeed")
		.prop(fq::reflect::prop::Comment, u8"이동 최대 속도 : 캐릭터가 움직일 수 있는 최대 속도")
		.data<&fq::physics::CharacterMovementInfo::acceleration>("Acceleration"_hs)
		.prop(fq::reflect::prop::Name, "Acceleration")
		.prop(fq::reflect::prop::Comment, u8"가속도 : 캐릭터가 입력 값을 받을 때 이동 가속도")
		.data<&fq::physics::CharacterMovementInfo::staticFriction>("StaticFriction"_hs)
		.prop(fq::reflect::prop::Name, "StaticFriction")
		.prop(fq::reflect::prop::Comment, u8"정적 마찰 계수 : 캐릭터가 이동 중 멈췄을 때 캐릭터가 받는 마찰력 ( 0.0f ~ 1.f )")
		.data<&fq::physics::CharacterMovementInfo::dynamicFriction>("DynamicFriction"_hs)
		.prop(fq::reflect::prop::Name, "DynamicFriction")
		.prop(fq::reflect::prop::Comment, u8"동적 마찰 계수 : 이동 중에 캐릭터가 받는 마찰력 ( 0.0f ~ 1.f )")
		//.data<&fq::physics::CharacterMovementInfo::jumpSpeed>("JumpSpeed"_hs)
		//.prop(fq::reflect::prop::Name, "JumpSpeed")
		//.prop(fq::reflect::prop::Comment, u8"점프(y축) 속도")
		//.data<&fq::physics::CharacterMovementInfo::jumpXZAcceleration>("JumpXZAcceleration"_hs)
		//.prop(fq::reflect::prop::Name, "JumpXZAcceleration")
		//.prop(fq::reflect::prop::Comment, u8"점프 중에 이동(XZ축) 가속도 값")
		//.data<&fq::physics::CharacterMovementInfo::jumpXZDeceleration>("JumpXZDeceleration"_hs)
		//.prop(fq::reflect::prop::Name, "JumpXZDeceleration")
		//.prop(fq::reflect::prop::Comment, u8"점프 중에 이동(XZ축) 감속 값 ( 0.0 ~ 1.0 )")
		.data<&fq::physics::CharacterMovementInfo::gravityWeight>("GravityWeight"_hs)
		.prop(fq::reflect::prop::Name, "GravityWeight")
		.prop(fq::reflect::prop::Comment, u8"기본 중력 값을 줄 수 있지만 가중치를 더 주고 싶을 때 값을 다르게 세팅할 수 있습니다.");


	// CharaterController
	entt::meta<CharacterController>()
		.type("CharacterController"_hs)
		.prop(fq::reflect::prop::Name, "CharacterController")
		.prop(fq::reflect::prop::Label, "Physcis")
		.data<&CharacterController::SetControllerID, &CharacterController::GetControllerID>("ControllerID"_hs)
		.prop(fq::reflect::prop::Name, "ControllerID")
		.prop(fq::reflect::prop::Comment, u8" 0 ~ 3")
		.data<&CharacterController::SetOffset, &CharacterController::GetOffset>("Offset"_hs)
		.prop(fq::reflect::prop::Name, "Offset")
		.data<&CharacterController::SetMovementInfo, &CharacterController::GetMovementInfo>("MoveInfo"_hs)
		.prop(fq::reflect::prop::Name, "MoveInfo")
		.data<&CharacterController::SetControllerInfo, &CharacterController::GetControllerInfo>("ControllerInfo"_hs)
		.prop(fq::reflect::prop::Name, "ControllerInfo")
		.base<Component>();


	// Articulation
	entt::meta<fq::physics::JointAxisInfo>()
		.type("JointAxisInfo"_hs)
		.prop(fq::reflect::prop::Name, "JointAxisInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::physics::JointAxisInfo::motion>("Motion"_hs)
		.prop(fq::reflect::prop::Name, "Motion")
		.prop(fq::reflect::prop::Comment, u8"모션 제한")
		.data<&fq::physics::JointAxisInfo::limitsLow>("LimitsLow"_hs)
		.prop(fq::reflect::prop::Name, "LimitsLow")
		.prop(fq::reflect::prop::Comment, u8"범위 ( Limit일 때 회전 아랫 각도 범위 : -180.0 ~ 0.0 ) ")
		.data<&fq::physics::JointAxisInfo::limitsHigh>("LimitsHigh"_hs)
		.prop(fq::reflect::prop::Name, "LimitsHigh")
		.prop(fq::reflect::prop::Comment, u8"범위 ( Limit일 때 회전 윗 각도 범위 : 0.0 ~ 180.0 )");


	entt::meta<fq::physics::JointInfo>()
		.type("JointInfo"_hs)
		.prop(fq::reflect::prop::Name, "JointInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::physics::JointInfo::Swing1AxisInfo>("Swing1AxisInfo"_hs)
		.prop(fq::reflect::prop::Name, "Swing1AxisInfo")
		.prop(fq::reflect::prop::Comment, u8"Swing1( X축을 중심으로 한 회전 )")
		.data<&fq::physics::JointInfo::Swing2AxisInfo>("Swing2AxisInfo"_hs)
		.prop(fq::reflect::prop::Name, "Swing2AxisInfo")
		.prop(fq::reflect::prop::Comment, u8"Swing2( Y축을 중심으로 한 회전 )")
		.data<&fq::physics::JointInfo::TwistAxisInfo>("TwistAxisInfo"_hs)
		.prop(fq::reflect::prop::Name, "TwistAxisInfo")
		.prop(fq::reflect::prop::Comment, u8"Twist( Z축을 중심으로 한 회전 )")
		.data<&fq::physics::JointInfo::localTransform>("LocalTransform"_hs)
		.prop(fq::reflect::prop::Name, "LocalTransform")
		.prop(fq::reflect::prop::Comment, u8"조인트의 로절 좌표 ( 부모 위치로 부터의 상대 위치 )")
		.data<&fq::physics::JointInfo::stiffness>("Stiffness"_hs)
		.prop(fq::reflect::prop::Name, "Stiffness")
		.prop(fq::reflect::prop::Comment, u8"강성 : 관절이 목표 위치로 이동하려는 힘의 크기 ( 0.f ~ 1.f )")
		.data<&fq::physics::JointInfo::damping>("Damping"_hs)
		.prop(fq::reflect::prop::Name, "Damping")
		.prop(fq::reflect::prop::Comment, u8"감쇠 계수 : 운동에 대한 저항력 ( 진동을 방지하고 부드럽게 움직이동 할 수 있게 ) ( 0.f ~ 1.f )")
		.data<&fq::physics::JointInfo::maxForce>("MaxForce"_hs)
		.prop(fq::reflect::prop::Name, "MaxForce")
		.prop(fq::reflect::prop::Comment, u8"최대 힘 : 관절 드라이브가 적용할 수 있는 최대 힘 ");


	entt::meta<fq::physics::LinkInfo>()
		.type("LinkInfo"_hs)
		.prop(fq::reflect::prop::Name, "LinkInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::physics::LinkInfo::boneName>("BoneName"_hs)
		.prop(fq::reflect::prop::Name, "BoneName")
		.prop(fq::reflect::prop::Comment, u8"해당 본(링크)의 이름")
		.data<&fq::physics::LinkInfo::parentBoneName>("ParentBoneName"_hs)
		.prop(fq::reflect::prop::Name, "ParentBoneName")
		.prop(fq::reflect::prop::Comment, u8"부모 본(링크)의 이름")
		.data<&fq::physics::LinkInfo::density>("Density"_hs)
		.prop(fq::reflect::prop::Name, "Density")
		.prop(fq::reflect::prop::Comment, u8"밀도 ( 0.f ~ 1.f )")
		.data<&fq::physics::LinkInfo::localTransform>("LocalTransform"_hs)
		.prop(fq::reflect::prop::Name, "LocalTransform")
		.prop(fq::reflect::prop::Comment, u8"로컬 좌표")
		.data<&fq::physics::LinkInfo::jointInfo>("JointInfo"_hs)
		.prop(fq::reflect::prop::Name, "JointInfo")
		.prop(fq::reflect::prop::Comment, u8"조인트 정보");


	entt::meta<fq::physics::ArticulationInfo>()
		.type("ArticulationInfo"_hs)
		.prop(fq::reflect::prop::Name, "ArticulationInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::physics::ArticulationInfo::id>("ID"_hs)
		.prop(fq::reflect::prop::Name, "ID")
		.prop(fq::reflect::prop::Comment, u8"아이디")
		.data<&fq::physics::ArticulationInfo::layerNumber>("LayerNumber"_hs)
		.prop(fq::reflect::prop::Name, "LayerNumber")
		.prop(fq::reflect::prop::Comment, u8"충돌 레이어 넘버")
		.data<&fq::physics::ArticulationInfo::worldTransform>("WorldTransform"_hs)
		.prop(fq::reflect::prop::Name, "WorldTransform")
		.prop(fq::reflect::prop::Comment, u8"월드 좌표")
		.data<&fq::physics::ArticulationInfo::staticFriction>("StaticFriction"_hs)
		.prop(fq::reflect::prop::Name, "StaticFriction")
		.prop(fq::reflect::prop::Comment, u8"정적 마찰 계수 ( 0.f ~ 1.f )")
		.data<&fq::physics::ArticulationInfo::dynamicFriction>("DynamicFriction"_hs)
		.prop(fq::reflect::prop::Name, "DynamicFriction")
		.prop(fq::reflect::prop::Comment, u8"동적 마찰 계수 ( 0.f ~ 1.f )")
		.data<&fq::physics::ArticulationInfo::restitution>("Restitution"_hs)
		.prop(fq::reflect::prop::Name, "Restitution")
		.prop(fq::reflect::prop::Comment, u8"복원 계수 ( 0.f ~ 1.f )")
		.data<&fq::physics::ArticulationInfo::density>("Density"_hs)
		.prop(fq::reflect::prop::Name, "Density")
		.prop(fq::reflect::prop::Comment, u8"밀도 ( 0.f ~ 1.f )");


	entt::meta<Articulation>()
		.type("Articulation"_hs)
		.prop(fq::reflect::prop::Name, "Articulation")
		.prop(fq::reflect::prop::Label, "Physcis")
		.data<&Articulation::SetArticulationPath, &Articulation::GetArticulationPath>("ArticulationPath"_hs)
		.prop(fq::reflect::prop::Name, "ArticulationPath")
		.prop(fq::reflect::prop::DragDrop, ".articulation")
		.prop(fq::reflect::prop::RelativePath)
		.data<&Articulation::SetRotationOffset, &Articulation::GetRotationOffset>("RotationOffset"_hs)
		.prop(fq::reflect::prop::Name, "RotationOffset")
		.prop(fq::reflect::prop::Comment, u8"Ragdoll에 보정된 회전 값을 적용합니다.")
		.data<&Articulation::SetCompleteTime, &Articulation::GetCompleteTime>("CompleteTime"_hs)
		.prop(fq::reflect::prop::Name, "CompleteTime")
		.prop(fq::reflect::prop::Comment, u8"총 보간 시간을 설정합니다.")
		.data<&Articulation::SetIsRagdoll, &Articulation::GetIsRagdoll>("bIsRagdoll"_hs)
		.prop(fq::reflect::prop::Name, "bIsRagdoll")
		.prop(fq::reflect::prop::Comment, u8"Ragdoll 시뮬레이션을 진행하는지 여부입니다.")
		.base<Component>();


	//////////////////////////////////////////////////////////////////////////
	//                              Sequence                                //
	//////////////////////////////////////////////////////////////////////////

	entt::meta<TrackKey>()
		.type("TrackKey"_hs)
		.prop(fq::reflect::prop::Name, "TrackKey")
		.prop(fq::reflect::prop::POD)
		.data<&fq::game_module::TrackKey::time>("Time"_hs)
		.prop(fq::reflect::prop::Name, "Time")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 시작되고 난 뒤에 시간")
		.data<&fq::game_module::TrackKey::position>("Position"_hs)
		.prop(fq::reflect::prop::Name, "Position")
		.prop(fq::reflect::prop::Comment, u8"위치")
		.data<&fq::game_module::TrackKey::rotation>("Rotation"_hs)
		.prop(fq::reflect::prop::Name, "Rotation")
		.prop(fq::reflect::prop::Comment, u8"회전")
		.data<&fq::game_module::TrackKey::scale>("Scale"_hs)
		.prop(fq::reflect::prop::Name, "Scale")
		.prop(fq::reflect::prop::Comment, u8"크기");

	entt::meta<AnimationTrackKey>()
		.type("AnimationTrackKey"_hs)
		.prop(fq::reflect::prop::Name, "AnimationTrackKey")
		.prop(fq::reflect::prop::POD)
		.data<&fq::game_module::AnimationTrackKey::time>("Time"_hs)
		.prop(fq::reflect::prop::Name, "Time")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 시작되고 난 뒤에 시간")
		.data<&fq::game_module::AnimationTrackKey::animationPath>("AnimationPath"_hs)
		.prop(fq::reflect::prop::Name, "AnimationPath")
		.prop(fq::reflect::prop::RelativePath)
		.prop(fq::reflect::prop::DragDrop, ".animation")
		.prop(fq::reflect::prop::Comment, u8"애니메이션 파일의 경로");

	entt::meta<CameraChangeTrackInfo>()
		.type("CameraChangeTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "CameraChangeTrackInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::game_module::CameraChangeTrackInfo::startTime>("StartTime"_hs)
		.prop(fq::reflect::prop::Name, "StartTime")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 시작되고 난 뒤에 시작할 시간")
		.data<&fq::game_module::CameraChangeTrackInfo::totalPlayTime>("TotalPlayTime"_hs)
		.prop(fq::reflect::prop::Name, "TotalPlayTime")
		.prop(fq::reflect::prop::Comment, u8"해당 트랙이 실행되고 난 뒤에 실행할 총 시간")
		.data<&fq::game_module::CameraChangeTrackInfo::prevCameraName>("PrevCameraName"_hs)
		.prop(fq::reflect::prop::Name, "PrevCameraName")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 실행하기 전에 포커스가 되어 있는 메인 카메라 이름")
		.data<&fq::game_module::CameraChangeTrackInfo::targetCameraName>("TargetCameraName"_hs)
		.prop(fq::reflect::prop::Name, "TargetCameraName")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 실행하고 난 후에 포커스를 할 카메라 이름")
		.data<&fq::game_module::CameraChangeTrackInfo::keys>("Key"_hs)
		.prop(fq::reflect::prop::Name, "Key")
		.prop(fq::reflect::prop::Comment, u8"카메라 월드 좌표");

	entt::meta<CameraShakeTrackInfo>()
		.type("CameraShakeTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "CameraShakeTrackInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::game_module::CameraShakeTrackInfo::startTime>("StartTime"_hs)
		.prop(fq::reflect::prop::Name, "StartTime")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 시작되고 난 뒤에 시작할 시간")
		.data<&fq::game_module::CameraShakeTrackInfo::totalPlayTime>("TotalPlayTime"_hs)
		.prop(fq::reflect::prop::Name, "TotalPlayTime")
		.prop(fq::reflect::prop::Comment, u8"해당 트랙이 실행되고 난 뒤에 실행할 총 시간")
		.data<&fq::game_module::CameraShakeTrackInfo::cameraObjectName>("CameraObjectName"_hs)
		.prop(fq::reflect::prop::Name, "CameraObjectName")
		.prop(fq::reflect::prop::Comment, u8"카메라 오브젝트의 이름")
		.data<&fq::game_module::CameraShakeTrackInfo::magnitude>("Magnitude"_hs)
		.prop(fq::reflect::prop::Name, "Magnitude")
		.prop(fq::reflect::prop::Comment, u8"흔들림의 크기(x, y, z)")
		.data<&fq::game_module::CameraShakeTrackInfo::shakeCount>("ShakeCount"_hs)
		.prop(fq::reflect::prop::Name, "ShakeCount")
		.prop(fq::reflect::prop::Comment, u8"플레이 시간동안 흔들리는 횟수")
		.data<&fq::game_module::CameraShakeTrackInfo::originInitSpacing>("OriginInitSpacing"_hs)
		.prop(fq::reflect::prop::Name, "OriginInitSpacing")
		.prop(fq::reflect::prop::Comment, u8"일정 횟수마다 카메라 원위치");

	entt::meta<ObjectMoveTrackInfo>()
		.type("ObjectMoveTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "ObjectMoveTrackInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::game_module::ObjectMoveTrackInfo::startTime>("StartTime"_hs)
		.prop(fq::reflect::prop::Name, "StartTime")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 시작되고 난 뒤에 시작할 시간")
		.data<&fq::game_module::ObjectMoveTrackInfo::totalPlayTime>("TotalPlayTime"_hs)
		.prop(fq::reflect::prop::Name, "TotalPlayTime")
		.prop(fq::reflect::prop::Comment, u8"해당 트랙이 실행되고 난 뒤에 실행할 총 시간")
		.data<&fq::game_module::ObjectMoveTrackInfo::targetObjectName>("TargetObjectName"_hs)
		.prop(fq::reflect::prop::Name, "TargetObjectName")
		.prop(fq::reflect::prop::Comment, u8"움직일 오브젝트 이름")
		.data<&fq::game_module::ObjectMoveTrackInfo::keys>("Keys"_hs)
		.prop(fq::reflect::prop::Name, "Keys");

	entt::meta<ObjectTeleportTrackInfo>()
		.type("ObjectTeleportTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "ObjectTeleportTrackInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::game_module::ObjectTeleportTrackInfo::startTime>("StartTime"_hs)
		.prop(fq::reflect::prop::Name, "StartTime")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 시작되고 난 뒤에 시작할 시간")
		.data<&fq::game_module::ObjectTeleportTrackInfo::totalPlayTime>("TotalPlayTime"_hs)
		.prop(fq::reflect::prop::Name, "TotalPlayTime")
		.prop(fq::reflect::prop::Comment, u8"해당 트랙이 실행되고 난 뒤에 실행할 총 시간")
		.data<&fq::game_module::ObjectTeleportTrackInfo::targetObjectName>("TargetObjectName"_hs)
		.prop(fq::reflect::prop::Name, "TargetObjectName")
		.prop(fq::reflect::prop::Comment, u8"움직일 오브젝트 이름")
		.data<&fq::game_module::ObjectTeleportTrackInfo::keys>("Keys"_hs)
		.prop(fq::reflect::prop::Name, "Keys");

	entt::meta<ObjectAnimationInfo>()
		.type("ObjectAnimationInfo"_hs)
		.prop(fq::reflect::prop::Name, "ObjectAnimationInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::game_module::ObjectAnimationInfo::startTime>("StartTime"_hs)
		.prop(fq::reflect::prop::Name, "StartTime")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 시작되고 난 뒤에 시작할 시간")
		.data<&fq::game_module::ObjectAnimationInfo::totalPlayTime>("TotalPlayTime"_hs)
		.prop(fq::reflect::prop::Name, "TotalPlayTime")
		.prop(fq::reflect::prop::Comment, u8"해당 트랙이 실행되고 난 뒤에 실행할 총 시간")
		.data<&fq::game_module::ObjectAnimationInfo::targetObjectName>("TargetObjectName"_hs)
		.prop(fq::reflect::prop::Name, "TargetObjectName")
		.prop(fq::reflect::prop::Comment, u8"움직일 오브젝트 이름")
		.data<&fq::game_module::ObjectAnimationInfo::animationTrackKeys>("AnimationTrackKeys"_hs)
		.prop(fq::reflect::prop::Name, "AnimationTrackKeys");

	entt::meta<EffectTrackInfo>()
		.type("EffectTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "EffectTrackInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::game_module::EffectTrackInfo::startTime>("StartTime"_hs)
		.prop(fq::reflect::prop::Name, "StartTime")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 시작되고 난 뒤에 시작할 시간")
		.data<&fq::game_module::EffectTrackInfo::totalPlayTime>("TotalPlayTime"_hs)
		.prop(fq::reflect::prop::Name, "TotalPlayTime")
		.prop(fq::reflect::prop::Comment, u8"해당 트랙이 실행되고 난 뒤에 실행할 총 시간")
		.data<&fq::game_module::EffectTrackInfo::effectPath>("EffectPath"_hs)
		.prop(fq::reflect::prop::Name, "EffectPath")
		.prop(fq::reflect::prop::RelativePath)
		.prop(fq::reflect::prop::DragDrop, ".prefab")
		.prop(fq::reflect::prop::Comment, u8"이펙트 프리펫의 경로를 드로그 드롭하세요.")
		.data<&fq::game_module::EffectTrackInfo::keys>("Keys"_hs)
		.prop(fq::reflect::prop::Name, "Keys");

	entt::meta<SoundTrackInfo>()
		.type("SoundTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "SoundTrackInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::game_module::SoundTrackInfo::startTime>("StartTime"_hs)
		.prop(fq::reflect::prop::Name, "StartTime")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 시작되고 난 뒤에 시작할 시간")
		.data<&fq::game_module::SoundTrackInfo::totalPlayTime>("TotalPlayTime"_hs)
		.prop(fq::reflect::prop::Name, "TotalPlayTime")
		.prop(fq::reflect::prop::Comment, u8"해당 트랙이 실행되고 난 뒤에 실행할 총 시간")
		.data<&fq::game_module::SoundTrackInfo::soundObjectName>("SoundObjectName"_hs)
		.prop(fq::reflect::prop::Name, "SoundObjectName")
		.prop(fq::reflect::prop::Comment, u8"현재 씬에 존재하는 사운드 오브젝트의 이름을 입력하세요.")
		.data<&fq::game_module::SoundTrackInfo::keyName>("KeyName"_hs)
		.prop(fq::reflect::prop::Name, "KeyName")
		.prop(fq::reflect::prop::Comment, u8"사운드의 이름을 입력하세요.")
		.data<&fq::game_module::SoundTrackInfo::bIsLoop>("bIsLoop"_hs)
		.prop(fq::reflect::prop::Name, "bIsLoop")
		.prop(fq::reflect::prop::Comment, u8"무한 반복 재생 여부입니다.");

	entt::meta<TextPrintTrackInfo>()
		.type("TextPrintTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "TextPrintTrackInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::game_module::TextPrintTrackInfo::startTime>("StartTime"_hs)
		.prop(fq::reflect::prop::Name, "StartTime")
		.prop(fq::reflect::prop::Comment, u8"시퀀스가 시작되고 난 뒤에 시작할 시간")
		.data<&fq::game_module::TextPrintTrackInfo::totalPlayTime>("TotalPlayTime"_hs)
		.prop(fq::reflect::prop::Name, "TotalPlayTime")
		.prop(fq::reflect::prop::Comment, u8"해당 트랙이 실행되고 난 뒤에 실행할 총 시간")
		.data<&fq::game_module::TextPrintTrackInfo::name>("Name"_hs)
		.prop(fq::reflect::prop::Name, "Name")
		.prop(fq::reflect::prop::Comment, u8"텍스트로 표시할 이름")
		.data<&fq::game_module::TextPrintTrackInfo::nameFontColor>("nameFontColor"_hs)
		.prop(fq::reflect::prop::Name, "nameFontColor")
		.prop(fq::reflect::prop::Comment, u8"이름 폰트 색상")
		.data<&fq::game_module::TextPrintTrackInfo::nameFontCenterY>("nameFontCenterY"_hs)
		.prop(fq::reflect::prop::Name, "nameFontCenterY")
		.prop(fq::reflect::prop::Comment, u8"이름 폰트 Y좌표 위치")
		.data<&fq::game_module::TextPrintTrackInfo::nameFontSize>("nameFontSize"_hs)
		.prop(fq::reflect::prop::Name, "nameFontSize")
		.prop(fq::reflect::prop::Comment, u8"이름 폰트 사이즈")
		.data<&fq::game_module::TextPrintTrackInfo::text>("Text"_hs)
		.prop(fq::reflect::prop::Name, "Text")
		.prop(fq::reflect::prop::Comment, u8"텍스트로 표시할 대사")
		.data<&fq::game_module::TextPrintTrackInfo::textFontColor>("textFontColor"_hs)
		.prop(fq::reflect::prop::Name, "textFontColor")
		.prop(fq::reflect::prop::Comment, u8"대사 폰트 색상")
		.data<&fq::game_module::TextPrintTrackInfo::textFontCenterY>("textFontCenterY"_hs)
		.prop(fq::reflect::prop::Name, "textFontCenterY")
		.prop(fq::reflect::prop::Comment, u8"대사 폰트 Y좌표 위치")
		.data<&fq::game_module::TextPrintTrackInfo::textFontSize>("textFontSize"_hs)
		.prop(fq::reflect::prop::Name, "textFontSize")
		.prop(fq::reflect::prop::Comment, u8"대사 폰트 사이즈");

	entt::meta<Sequence>()
		.type("Sequence"_hs)
		.prop(fq::reflect::prop::Name, "Sequence")
		.prop(fq::reflect::prop::Label, "Miscellaneous")
		.data<&Sequence::SetDurationTime, &Sequence::GetDurationTime>("DurationTime"_hs)
		.prop(fq::reflect::prop::Name, "DurationTime")
		.prop(fq::reflect::prop::Comment, u8"시퀀스 지연시간입니다.")
		.data<&Sequence::SetIsPlay, &Sequence::GetIsPlay>("bIsPlay"_hs)
		.prop(fq::reflect::prop::Name, "bIsPlay")
		.prop(fq::reflect::prop::Comment, u8"시작할 지 설정합니다.")
		.data<&Sequence::SetIsLoop, &Sequence::GetIsLoop>("bIsLoop"_hs)
		.prop(fq::reflect::prop::Name, "bIsLoop")
		.prop(fq::reflect::prop::Comment, u8"루프를 설정합니다.")
		.data<&Sequence::SetCameraChangeTrackInfo, &Sequence::GetCameraChangeTrackInfo>("CameraChangeTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "CameraChangeTrackInfo")
		.prop(fq::reflect::prop::Comment, u8"만들고 싶은 카메라 변경 트랙이 있다면 추가하면 됩니다.")
		.data<&Sequence::SetCameraShakeTrackInfo, &Sequence::GetCameraShakeTrackInfo>("CameraShakeTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "CameraShakeTrackInfo")
		.prop(fq::reflect::prop::Comment, u8"카메라 진동 트랙입니다.")
		.data<&Sequence::SetObjectMoveTrackInfo, &Sequence::GetObjectMoveTrackInfo>("ObjectMoveTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "ObjectMoveTrackInfo")
		.prop(fq::reflect::prop::Comment, u8"만들고 싶은 오브젝트 이동 트랙이 있다면 추가하면 됩니다.")
		.data<&Sequence::SetObjectTeleportTrackInfo, &Sequence::GetObjectTeleportTrackInfo>("ObjectTeleportTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "ObjectTeleportTrackInfo")
		.prop(fq::reflect::prop::Comment, u8"만들고 싶은 오브젝트 순간이동 트랙이 있다면 추가하면 됩니다.")
		.data<&Sequence::SetObjectAnimationInfo, &Sequence::GetObjectAnimationInfo>("ObjectAnimationInfo"_hs)
		.prop(fq::reflect::prop::Name, "ObjectAnimationInfo")
		.prop(fq::reflect::prop::Comment, u8"만들고 싶은 오브젝트 애니메이션 트랙이 있다면 추가하면 됩니다.")
		.data<&Sequence::SetEffectTrackInfo, &Sequence::GetEffectTrackInfo>("EffectTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "EffectTrackInfo")
		.prop(fq::reflect::prop::Comment, u8"만들고 싶은 이펙트 트랙이 있다면 추가하면 됩니다.")
		.data<&Sequence::SetSoundTrackInfo, &Sequence::GetSoundTrackInfo>("SoundTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "SoundTrackInfo")
		.prop(fq::reflect::prop::Comment, u8"만들고 싶은 사운드 트랙이 있다면 추가하면 됩니다.")
		.data<&Sequence::SetTextPrintTrackInfo, &Sequence::GetTextPrintTrackInfo>("TextPrintTrackInfo"_hs)
		.prop(fq::reflect::prop::Name, "TextPrintTrackInfo")
		.prop(fq::reflect::prop::Comment, u8"만들고 싶은 텍스트 스크립트가 있다면 추가하면 됩니다.")
		.base<Component>();

	//////////////////////////////////////////////////////////////////////////
	//                              Sound                                   //
	//////////////////////////////////////////////////////////////////////////

	entt::meta<SoundClip::SoundInfo>()
		.type("ClipSoundInfo"_hs)
		.prop(fq::reflect::prop::Name, "ClipSoundInfo")
		.prop(fq::reflect::prop::POD)
		.data<&SoundClip::SoundInfo::key>("Key"_hs)
		.prop(fq::reflect::prop::Name, "Key")
		.data<&SoundClip::SoundInfo::path>("Path"_hs)
		.prop(fq::reflect::prop::Name, "Path")
		.prop(fq::reflect::prop::DragDrop, ".mp3/.wav")
		.prop(fq::reflect::prop::RelativePath);

	entt::meta<SoundClip>()
		.type("SoundClip"_hs)
		.prop(fq::reflect::prop::Name, "SoundClip")
		.prop(fq::reflect::prop::Label, "Audio")
		.data<&SoundClip::SetSounds, &SoundClip::GetSounds>("Sounds"_hs)
		.prop(fq::reflect::prop::Name, "Sounds")
		.prop(fq::reflect::prop::Comment, u8"로드하는 사운드를 드래그드랍으로 추가합니다")
		.base<Component>();


	//////////////////////////////////////////////////////////////////////////
	//                            Animation                                 //
	//////////////////////////////////////////////////////////////////////////

	entt::meta<AnimationStateNode::Type>()
		.type("AnimationStateNodeType"_hs)
		.prop(fq::reflect::prop::Name, "AnimationStateNodeType")
		.data<AnimationStateNode::Type::Entry>("Entry"_hs)
		.prop(fq::reflect::prop::Name, "Entry")
		.data<AnimationStateNode::Type::AnyState>("AnyState"_hs)
		.prop(fq::reflect::prop::Name, "AnyState")
		.data<AnimationStateNode::Type::Exit>("Exit"_hs)
		.prop(fq::reflect::prop::Name, "Exit")
		.data<AnimationStateNode::Type::State>("State"_hs)
		.prop(fq::reflect::prop::Name, "State");

	entt::meta<AnimationStateNode::Event>()
		.type("AnimationStateEffectEvent"_hs)
		.prop(fq::reflect::prop::Name, "AnimationStateEffectEvent")
		.data<&AnimationStateNode::Event::FunctionName>("FunctionName"_hs)
		.prop(fq::reflect::prop::Name, "FunctionName")
		.data<&AnimationStateNode::Event::Time>("Time"_hs)
		.prop(fq::reflect::prop::Name, "Time");

	entt::meta<AnimationStateNode>()
		.type("AnimationStateNode"_hs)
		.prop(fq::reflect::prop::Name, "AnimationStateNode")
		.data<&AnimationStateNode::SetType, &AnimationStateNode::GetType>("Type"_hs)
		.prop(fq::reflect::prop::Name, "Type")
		.data<&AnimationStateNode::SetAnimationPath, &AnimationStateNode::GetAnimationPath>("AnimationPath"_hs)
		.prop(fq::reflect::prop::Name, "AnimationPath")
		.prop(fq::reflect::prop::RelativePath)
		.data<&AnimationStateNode::SetAnimationKey, &AnimationStateNode::GetAnimationKey>("AnimationKey"_hs)
		.prop(fq::reflect::prop::Name, "AnimationKey")
		.data<&AnimationStateNode::SetPlayBackSpeed, &AnimationStateNode::GetPlayBackSpeed>("PlayBackSpeed"_hs)
		.prop(fq::reflect::prop::Name, "PlayBackSpeed")
		.data<&AnimationStateNode::SetPlayBackSpeed, &AnimationStateNode::GetPlayBackSpeed>("PlayBackSpeed"_hs)
		.prop(fq::reflect::prop::Name, "PlayBackSpeed")
		.data<&AnimationStateNode::mEvents>("EffectInfos"_hs)
		.prop(fq::reflect::prop::Name, "EffectInfos");

	entt::meta<Animator>()
		.type("Animator"_hs)
		.prop(fq::reflect::prop::Name, "Animator")
		.prop(fq::reflect::prop::Label, "Miscellaneous")
		.data<&Animator::SetControllerPath, &Animator::GetControllerPath>("ControllerPath"_hs)
		.prop(fq::reflect::prop::Name, "ControllerPath")
		.prop(fq::reflect::prop::DragDrop, ".controller")
		.prop(fq::reflect::prop::RelativePath)
		.data<&Animator::SetNodeHierarchyPath, &Animator::GetNodeHierarchyPath>("NodeHierarchyModelPath"_hs)
		.prop(fq::reflect::prop::Comment, u8"애니메이션 처리 시 참조할 본 계층 구조")
		.prop(fq::reflect::prop::DragDrop, ".nodeHierachy")
		.prop(fq::reflect::prop::Name, "NodeHierarchyModelPath")
		.prop(fq::reflect::prop::RelativePath)
		.base<Component>();

	entt::meta<UVAnimator>()
		.type("UVAnimator"_hs)
		.prop(fq::reflect::prop::Name, "UVAnimator")
		.prop(fq::reflect::prop::Label, "Miscellaneous")
		.data<&UVAnimator::SetUVAnimationPath, &UVAnimator::GetUVAnimationPath>("UVAnimationPath"_hs)
		.prop(fq::reflect::prop::Name, "UVAnimationPath")
		.prop(fq::reflect::prop::DragDrop, ".uvAnimation")
		.prop(fq::reflect::prop::RelativePath)
		.data<&UVAnimator::SetIsRecursive, &UVAnimator::GetIsRecursive>("IsRecursive"_hs)
		.prop(fq::reflect::prop::Name, "IsRecursive")
		.prop(fq::reflect::prop::Comment, u8"애니메이션 반복 여부")
		.data<&UVAnimator::SetIsUpdate, &UVAnimator::GetIsUpdate>("IsUpdate"_hs)
		.prop(fq::reflect::prop::Name, "IsUpdate")
		.prop(fq::reflect::prop::Comment, u8"애니메이션 갱신 여부")
		.base<Component>();

	entt::meta<LogStateBehaviour>()
		.type("LogStateBehaviour"_hs)
		.prop(fq::reflect::prop::Name, "LogStateBehaviour")
		.data<&LogStateBehaviour::SetExitCount, &LogStateBehaviour::GetExitCount>("ExitCount"_hs)
		.prop(fq::reflect::prop::Name, "ExitCount")
		.data<&LogStateBehaviour::SetEnterCount, &LogStateBehaviour::GetEnterCount>("EnterCount"_hs)
		.prop(fq::reflect::prop::Name, "EnterCount")
		.base<IStateBehaviour>();

	entt::meta<EAnimationMode>()
		.type("AlphaAnimationMode"_hs)
		.prop(fq::reflect::prop::Name, "AlphaAnimationMode")
		.data<EAnimationMode::Increase>("Increase"_hs)
		.prop(fq::reflect::prop::Name, "Increase")
		.data<EAnimationMode::Decrease>("Decrease"_hs)
		.prop(fq::reflect::prop::Name, "Decrease");

	entt::meta<AlphaAnimatorInfo>()
		.type("AlphaAnimatorInfo"_hs)
		.prop(fq::reflect::prop::Name, "AlphaAnimatorInfo")
		.prop(fq::reflect::prop::POD)
		.data<&AlphaAnimatorInfo::bIsUsed>("bIsUsed"_hs)
		.prop(fq::reflect::prop::Name, "bIsUsed")
		.data<&AlphaAnimatorInfo::Alpha>("Alpha"_hs)
		.prop(fq::reflect::prop::Name, "Alpha")
		.data<&AlphaAnimatorInfo::TimePos>("TimePos"_hs)
		.prop(fq::reflect::prop::Name, "TimePos")
		.data<&AlphaAnimatorInfo::bIsLooping>("bIsLooping"_hs)
		.prop(fq::reflect::prop::Name, "bIsLooping")
		.data<&AlphaAnimatorInfo::bIsUpdate>("bIsUpdate"_hs)
		.prop(fq::reflect::prop::Name, "bIsUpdate")
		.data<&AlphaAnimatorInfo::Duration>("Duration"_hs)
		.prop(fq::reflect::prop::Name, "Duration")
		.data<&AlphaAnimatorInfo::Speed>("Speed"_hs)
		.prop(fq::reflect::prop::Name, "Speed")
		.data<&AlphaAnimatorInfo::DelayTime>("DelayTime"_hs)
		.prop(fq::reflect::prop::Name, "DelayTime")
		.data<&AlphaAnimatorInfo::InitAlpha>("InitAlpha"_hs)
		.prop(fq::reflect::prop::Name, "InitAlpha")
		.data<&AlphaAnimatorInfo::MaxAlpha>("MaxAlpha"_hs)
		.prop(fq::reflect::prop::Name, "MaxAlpha")
		.data<&AlphaAnimatorInfo::MinAlpha>("MinAlpha"_hs)
		.prop(fq::reflect::prop::Name, "MinAlpha")
		.data<&AlphaAnimatorInfo::AnimationMode>("AlphaAnimationMode"_hs)
		.prop(fq::reflect::prop::Name, "AlphaAnimationMode");

	entt::meta<DissolveAnimatorInfo>()
		.type("DissolveAnimatorInfo"_hs)
		.prop(fq::reflect::prop::Name, "DissolveAnimatorInfo")
		.prop(fq::reflect::prop::POD)
		.data<&DissolveAnimatorInfo::bIsUsed>("bIsUsed"_hs)
		.prop(fq::reflect::prop::Name, "bIsUsed")
		.data<&DissolveAnimatorInfo::DissolveCutoff>("DissolveCutoff"_hs)
		.prop(fq::reflect::prop::Name, "DissolveCutoff")
		.data<&DissolveAnimatorInfo::TimePos>("TimePos"_hs)
		.prop(fq::reflect::prop::Name, "TimePos")
		.data<&DissolveAnimatorInfo::bIsLooping>("bIsLooping"_hs)
		.prop(fq::reflect::prop::Name, "bIsLooping")
		.data<&DissolveAnimatorInfo::bIsUpdate>("bIsUpdate"_hs)
		.prop(fq::reflect::prop::Name, "bIsUpdate")
		.data<&DissolveAnimatorInfo::Duration>("Duration"_hs)
		.prop(fq::reflect::prop::Name, "Duration")
		.data<&DissolveAnimatorInfo::Speed>("Speed"_hs)
		.prop(fq::reflect::prop::Name, "Speed")
		.data<&DissolveAnimatorInfo::DelayTime>("DelayTime"_hs)
		.prop(fq::reflect::prop::Name, "DelayTime")
		.data<&DissolveAnimatorInfo::InitDissolveCutoff>("InitDissolveCutoff"_hs)
		.prop(fq::reflect::prop::Name, "InitDissolveCutoff")
		.data<&DissolveAnimatorInfo::MaxDissolveCutoff>("MaxDissolveCutoff"_hs)
		.prop(fq::reflect::prop::Name, "MaxDissolveCutoff")
		.data<&DissolveAnimatorInfo::MinDissolveCutoff>("MinDissolveCutoff"_hs)
		.prop(fq::reflect::prop::Name, "MinDissolveCutoff")
		.data<&DissolveAnimatorInfo::AnimationMode>("AlphaAnimationMode"_hs)
		.prop(fq::reflect::prop::Name, "AlphaAnimationMode");

	entt::meta<MaterialAnimator>()
		.type("MaterialAnimator"_hs)
		.prop(fq::reflect::prop::Name, "MaterialAnimator")
		.prop(fq::reflect::prop::Label, "Miscellaneous")
		.data<&MaterialAnimator::SetAlphaAnimatorInfo, &MaterialAnimator::GetAlphaAnimatorInfo>("AlphaAnimatorInfo"_hs)
		.prop(fq::reflect::prop::Name, "AlphaAnimatorInfo")
		.data<&MaterialAnimator::SetDissolveAnimatorInfo, &MaterialAnimator::GetDissolveAnimatorInfo>("DissolveAnimatorInfo"_hs)
		.prop(fq::reflect::prop::Name, "DissolveAnimatorInfo")
		.base<Component>();


	//////////////////////////////////////////////////////////////////////////
	//                            Socket	                                 //
	//////////////////////////////////////////////////////////////////////////

	entt::meta<Socket>()
		.type("Socket"_hs)
		.prop(fq::reflect::prop::Name, "Socket")
		.prop(fq::reflect::prop::Label, "Miscellaneous")
		.data<&Socket::SetBoneName, &Socket::GetBoneName>("BoneName"_hs)
		.prop(fq::reflect::prop::Name, "BoneName")
		.base<Component>();

	//////////////////////////////////////////////////////////////////////////
	//                              Prefab                                  //
	//////////////////////////////////////////////////////////////////////////

	entt::meta<PrefabTest>()
		.type("PrefabTest"_hs)
		.prop(fq::reflect::prop::Name, "PrefabTest")
		.prop(fq::reflect::prop::Label, "Miscellaneous")
		.data<&PrefabTest::SetFireObject, &PrefabTest::GetFireObject>("FireObject"_hs)
		.prop(fq::reflect::prop::Name, "FireObject")
		.prop(fq::reflect::prop::Comment, u8"프리팹을 추가하면 자동 발사!")
		.data<&PrefabTest::SetCreateTime, &PrefabTest::GetCreateTime>("CreateTime"_hs)
		.prop(fq::reflect::prop::Name, "CreateTime")
		.base<Component>();

	//////////////////////////////////////////////////////////////////////////
	//                             Particle                                 //
	//////////////////////////////////////////////////////////////////////////

	{
		using namespace graphics;

		entt::meta<ParticleInfo::EOption>()
			.prop(fq::reflect::prop::Name, "ParticleOption")
			.conv<std::underlying_type_t<ParticleInfo::EOption>>()
			.data<ParticleInfo::EOption::Constant>("Contant"_hs)
			.prop(fq::reflect::prop::Name, "Constant")
			.data<ParticleInfo::EOption::RandomBetweenTwoConstant>("RandomBetweenTwoConstant"_hs)
			.prop(fq::reflect::prop::Name, "RandomBetweenTwoConstant");

		entt::meta<ParticleInfo::Shape::EShape>()
			.prop(fq::reflect::prop::Name, "ParticleShapeType")
			.conv<std::underlying_type_t<ParticleInfo::Shape::EShape>>()
			.data<ParticleInfo::Shape::EShape::Sphere>("Sphere"_hs)
			.prop(fq::reflect::prop::Name, "Sphere")
			.data<ParticleInfo::Shape::EShape::Hemisphere>("Hemisphere"_hs)
			.prop(fq::reflect::prop::Name, "Hemisphere")
			.data<ParticleInfo::Shape::EShape::Cone>("Cone"_hs)
			.prop(fq::reflect::prop::Name, "Cone")
			.data<ParticleInfo::Shape::EShape::Donut>("Donut"_hs)
			.prop(fq::reflect::prop::Name, "Donut")
			.data<ParticleInfo::Shape::EShape::Box>("Box"_hs)
			.prop(fq::reflect::prop::Name, "Box")
			.data<ParticleInfo::Shape::EShape::Circle>("Circle"_hs)
			.prop(fq::reflect::prop::Name, "Circle")
			.data<ParticleInfo::Shape::EShape::Rectangle>("Rectangle"_hs)
			.prop(fq::reflect::prop::Name, "Rectangle");

		entt::meta<ParticleInfo::Shape::EMode>()
			.prop(fq::reflect::prop::Name, "ParticleShapeMode")
			.conv<std::underlying_type_t<ParticleInfo::Shape::EMode>>()
			.data<ParticleInfo::Shape::EMode::Random>("Random"_hs)
			.prop(fq::reflect::prop::Name, "Random");

		entt::meta<ParticleInfo::Main>()
			.type("ParticleMainInfo"_hs)
			.prop(fq::reflect::prop::Name, "ParticleMainInfo")
			.prop(fq::reflect::prop::POD)
			.data<&ParticleInfo::Main::Duration>("Duration"_hs)
			.prop(fq::reflect::prop::Name, "Duration")
			.prop(fq::reflect::prop::Comment, u8"총 재생시간")
			.data<&ParticleInfo::Main::bIsLooping>("IsLooping"_hs)
			.prop(fq::reflect::prop::Name, "IsLooping")

			.data<&ParticleInfo::Main::StartDelayOption>("StartDelayOption"_hs)
			.prop(fq::reflect::prop::Name, "StartDelayOption")
			.data<&ParticleInfo::Main::StartDelay>("StartDelay"_hs)
			.prop(fq::reflect::prop::Name, "StartDelay")
			.prop(fq::reflect::prop::Comment, u8"방출 시작 시간")

			.data<&ParticleInfo::Main::StartLifeTimeOption>("StartLifeTimeOption"_hs)
			.prop(fq::reflect::prop::Name, "StartLifeTimeOption")
			.data<&ParticleInfo::Main::StartLifeTime>("StartLifeTime"_hs)
			.prop(fq::reflect::prop::Name, "StartLifeTime")
			.prop(fq::reflect::prop::Comment, u8"파티클 생존 시간")

			.data<&ParticleInfo::Main::StartSpeedOption>("StartSpeedOption"_hs)
			.prop(fq::reflect::prop::Name, "StartSpeedOption")
			.data<&ParticleInfo::Main::StartSpeed>("StartSpeed"_hs)
			.prop(fq::reflect::prop::Name, "StartSpeed")
			.prop(fq::reflect::prop::Comment, u8"방출 속도")

			.data<&ParticleInfo::Main::StartSizeOption>("StartSizeOption"_hs)
			.prop(fq::reflect::prop::Name, "StartSizeOption")
			.data<&ParticleInfo::Main::StartSize>("StartSize"_hs)
			.prop(fq::reflect::prop::Name, "StartSize")
			.prop(fq::reflect::prop::Comment, u8"파티클 크기")

			.data<&ParticleInfo::Main::StartRotationOption>("StartRotationOption"_hs)
			.prop(fq::reflect::prop::Name, "StartRotationOption")
			.data<&ParticleInfo::Main::StartRotation>("StartRotation"_hs)
			.prop(fq::reflect::prop::Name, "StartRotation")
			.prop(fq::reflect::prop::Comment, u8"파티클 회전")

			.data<&ParticleInfo::Main::StartColorOption>("StartColorOption"_hs)
			.prop(fq::reflect::prop::Name, "StartColorOption")
			.data<&ParticleInfo::Main::StartColor0>("StartColor0"_hs)
			.prop(fq::reflect::prop::Name, "StartColor0")
			.prop(fq::reflect::prop::Comment, u8"파티클 색상")
			.data<&ParticleInfo::Main::StartColor1>("StartColor1"_hs)
			.prop(fq::reflect::prop::Name, "StartColor1")
			.prop(fq::reflect::prop::Comment, u8"파티클 색상")

			.data<&ParticleInfo::Main::GravityModifierOption>("GravityModifierOption"_hs)
			.prop(fq::reflect::prop::Name, "GravityModifierOption")
			.data<&ParticleInfo::Main::GravityModifier>("GravityModifier"_hs)
			.prop(fq::reflect::prop::Name, "GravityModifier")
			.prop(fq::reflect::prop::Comment, u8"파티클 중력")

			.data<&ParticleInfo::Main::SimulationSpeed>("SimulationSpeed"_hs)
			.prop(fq::reflect::prop::Name, "SimulationSpeed")

			.data<&ParticleInfo::Main::MaxParticleCount>("MaxParticleCount"_hs)
			.prop(fq::reflect::prop::Name, "MaxParticleCount")
			.prop(fq::reflect::prop::Comment, u8"최대 1024");

		entt::meta<ParticleInfo::Shape>()
			.type("ShapeInfo"_hs)
			.prop(fq::reflect::prop::Name, "ShapeInfo")
			.prop(fq::reflect::prop::POD)
			.data<&ParticleInfo::Shape::ShapeType>("ShapeType"_hs)
			.prop(fq::reflect::prop::Name, "ShapeType")
			.prop(fq::reflect::prop::Comment, u8"방출 모양")
			.data<&ParticleInfo::Shape::ModeType>("ModeType"_hs)
			.prop(fq::reflect::prop::Name, "ModeType")
			.prop(fq::reflect::prop::Comment, u8"방출 방식")
			.data<&ParticleInfo::Shape::AngleInDegree>("AngleInDegree"_hs)
			.prop(fq::reflect::prop::Name, "AngleInDegree")
			.prop(fq::reflect::prop::Comment, u8"방출 각도")
			.data<&ParticleInfo::Shape::Radius>("Radius"_hs)
			.prop(fq::reflect::prop::Name, "Radius")
			.prop(fq::reflect::prop::Comment, u8"반지름")
			.data<&ParticleInfo::Shape::DountRadius>("DountRadius"_hs)
			.prop(fq::reflect::prop::Name, "DountRadius")
			.prop(fq::reflect::prop::Comment, u8"도넛 반지름")
			.data<&ParticleInfo::Shape::ArcInDegree>("ArcInDegree"_hs)
			.prop(fq::reflect::prop::Name, "ArcInDegree")
			.prop(fq::reflect::prop::Comment, u8"호 크기")
			.data<&ParticleInfo::Shape::RadiusThickness>("RadiusThickness"_hs)
			.prop(fq::reflect::prop::Name, "RadiusThickness")
			.prop(fq::reflect::prop::Comment, u8" 입방체의 어느 부분 부터 방출될 것인지 0 ~ 1f")
			.data<&ParticleInfo::Shape::Position>("Position"_hs)
			.prop(fq::reflect::prop::Name, "Position")
			.data<&ParticleInfo::Shape::Rotation>("Rotation"_hs)
			.prop(fq::reflect::prop::Name, "Rotation")
			.data<&ParticleInfo::Shape::Scale>("Scale"_hs)
			.prop(fq::reflect::prop::Name, "Scale");

		entt::meta<ParticleInfo::Emission::Burst>()
			.type("EmissionBurst"_hs)
			.prop(fq::reflect::prop::Name, "EmissionBurst")
			.prop(fq::reflect::prop::POD)
			.prop(fq::reflect::prop::Comment, u8"파티클 생성 이벤트")
			.data<&ParticleInfo::Emission::Burst::TimePos>("TimePos"_hs)
			.prop(fq::reflect::prop::Name, "TimePos")
			.prop(fq::reflect::prop::Comment, u8" 처리할 시간")
			.data<&ParticleInfo::Emission::Burst::Count>("Count"_hs)
			.prop(fq::reflect::prop::Name, "Count")
			.prop(fq::reflect::prop::Comment, u8" 방출될 파티클 수")
			.data<&ParticleInfo::Emission::Burst::Cycles>("Cycles"_hs)
			.prop(fq::reflect::prop::Name, "Cycles")
			.prop(fq::reflect::prop::Comment, u8"  버스트 반복 횟수")
			.data<&ParticleInfo::Emission::Burst::Interval>("Interval"_hs)
			.prop(fq::reflect::prop::Name, "Interval")
			.prop(fq::reflect::prop::Comment, u8"버스트 사이 간격")
			.data<&ParticleInfo::Emission::Burst::Probability>("Probability"_hs)
			.prop(fq::reflect::prop::Name, "Probability")
			.prop(fq::reflect::prop::Comment, u8"0 ~ 1 사이의 확률 값을 사용");

		entt::meta<ParticleInfo::VelocityOverLifetime>()
			.type("VelocityOverLifetime"_hs)
			.prop(fq::reflect::prop::Name, "VelocityOverLifetime")
			.prop(fq::reflect::prop::POD)
			.prop(fq::reflect::prop::Comment, u8"수명에 따른 속도 변화")
			.data<&ParticleInfo::VelocityOverLifetime::Velocity>("Velocity"_hs)
			.prop(fq::reflect::prop::Name, "Velocity")
			.data<&ParticleInfo::VelocityOverLifetime::Orbital>("Orbital"_hs)
			.prop(fq::reflect::prop::Name, "Orbital")
			.prop(fq::reflect::prop::Comment, u8"축에 따른 궤도 속도")
			.data<&ParticleInfo::VelocityOverLifetime::Offset>("Offset"_hs)
			.prop(fq::reflect::prop::Name, "Offset")
			.prop(fq::reflect::prop::Comment, u8"궤도 회전 시 중심부로부터 거리")
			.data<&ParticleInfo::VelocityOverLifetime::bIsUsed>("IsUsed"_hs)
			.prop(fq::reflect::prop::Name, "IsUsed");

		entt::meta<ParticleInfo::LimitVelocityOverLifetime>()
			.type("LimitVelocityOverLifetime"_hs)
			.prop(fq::reflect::prop::Name, "LimitVelocityOverLifetime")
			.prop(fq::reflect::prop::POD)
			.prop(fq::reflect::prop::Comment, u8"수명에 따른 속도 제한")
			.data<&ParticleInfo::LimitVelocityOverLifetime::Speed>("Speed"_hs)
			.prop(fq::reflect::prop::Name, "Speed")
			.data<&ParticleInfo::LimitVelocityOverLifetime::Dampen>("Dampen"_hs)
			.prop(fq::reflect::prop::Name, "Dampen")
			.prop(fq::reflect::prop::Comment, u8"제한 속도 초과 시 감소 비율")
			.data<&ParticleInfo::LimitVelocityOverLifetime::bIsUsed>("IsUsed"_hs)
			.prop(fq::reflect::prop::Name, "IsUsed");

		entt::meta<ParticleInfo::ForceOverLifetime>()
			.type("ForceOverLifetime"_hs)
			.prop(fq::reflect::prop::Name, "ForceOverLifetime")
			.prop(fq::reflect::prop::POD)
			.prop(fq::reflect::prop::Comment, u8"수명에 따른 힘 변화")
			.data<&ParticleInfo::ForceOverLifetime::Force>("Force"_hs)
			.prop(fq::reflect::prop::Name, "Force")
			.data<&ParticleInfo::ForceOverLifetime::bIsUsed>("IsUsed"_hs)
			.prop(fq::reflect::prop::Name, "IsUsed");

		entt::meta<ParticleInfo::ColorOverLifetime>()
			.type("ColorOverLifetime"_hs)
			.prop(fq::reflect::prop::Name, "ColorOverLifetime")
			.prop(fq::reflect::prop::POD)
			.prop(fq::reflect::prop::Comment, u8"수명에 따른 색상 변화")
			.data<&ParticleInfo::ColorOverLifetime::bIsUsed>("IsUsed"_hs)
			.prop(fq::reflect::prop::Name, "IsUsed");

		entt::meta<ParticleInfo::SizeOverLifetime>()
			.type("SizeOverLifetime"_hs)
			.prop(fq::reflect::prop::Name, "SizeOverLifetime")
			.prop(fq::reflect::prop::POD)
			.prop(fq::reflect::prop::Comment, u8"수명에 따른 크기 변화")
			.data<&ParticleInfo::SizeOverLifetime::PointA>("PointA"_hs)
			.prop(fq::reflect::prop::Name, "PointA")
			.data<&ParticleInfo::SizeOverLifetime::PointB>("PointB"_hs)
			.prop(fq::reflect::prop::Name, "PointB")
			.data<&ParticleInfo::SizeOverLifetime::PointC>("PointC"_hs)
			.prop(fq::reflect::prop::Name, "PointC")
			.data<&ParticleInfo::SizeOverLifetime::PointD>("PointD"_hs)
			.prop(fq::reflect::prop::Name, "PointD")
			.data<&ParticleInfo::SizeOverLifetime::bIsUsed>("IsUsed"_hs)
			.prop(fq::reflect::prop::Name, "IsUsed");

		entt::meta<ParticleInfo::RotationOverLifetime>()
			.type("RotationOverLifetime"_hs)
			.prop(fq::reflect::prop::Name, "RotationOverLifetime")
			.prop(fq::reflect::prop::POD)
			.prop(fq::reflect::prop::Comment, u8"수명에 따른 회전 변화")
			.data<&ParticleInfo::RotationOverLifetime::AngularVelocityInDegree>("AngularVelocityInDegree"_hs)
			.prop(fq::reflect::prop::Name, "AngularVelocityInDegree")
			.data<&ParticleInfo::RotationOverLifetime::bIsUsed>("IsUsed"_hs)
			.prop(fq::reflect::prop::Name, "IsUsed");

		entt::meta<ParticleInfo::Render::ERenderMode>()
			.prop(fq::reflect::prop::Name, "ParticleRenderMode")
			.conv<std::underlying_type_t<ParticleInfo::Render::ERenderMode>>()
			.data<ParticleInfo::Render::ERenderMode::Billboard>("Billboard"_hs)
			.prop(fq::reflect::prop::Name, "Billboard");

		entt::meta<ParticleInfo::Render>()
			.type("ParticleRenderData"_hs)
			.prop(fq::reflect::prop::Name, "ParticleRenderData")
			.prop(fq::reflect::prop::POD)
			.data<&ParticleInfo::Render::RenderMode>("RenderMode"_hs)
			.prop(fq::reflect::prop::Name, "RenderMode")
			.prop(fq::reflect::prop::RelativePath)
			.prop(fq::reflect::prop::DragDrop, ".png/.jpg");

		entt::meta<ParticleInfo::Instance>()
			.type("ParticleInstanceData"_hs)
			.prop(fq::reflect::prop::Name, "ParticleInstanceData")
			.prop(fq::reflect::prop::POD)
			.data<&ParticleInfo::Instance::bIsEmit>("IsEmit"_hs)
			.prop(fq::reflect::prop::Name, "IsEmit")
			.data<&ParticleInfo::Instance::bIsReset>("IsReset"_hs)
			.prop(fq::reflect::prop::Name, "bIsReset")
			.data<&ParticleInfo::Instance::DebugRenderColor>("DebugRenderColor"_hs)
			.prop(fq::reflect::prop::Name, "DebugRenderColor")
			.data<&ParticleInfo::Instance::bIsRenderDebug>("IsRenderDebug"_hs)
			.prop(fq::reflect::prop::Name, "IsRenderDebug");

		entt::meta<Particle>()
			.type("Particle"_hs)
			.prop(fq::reflect::prop::Name, "Particle")
			.prop(fq::reflect::prop::Label, "Miscellaneous")
			.data<&Particle::SetMainParticleInfo, &Particle::GetMainParticleInfo>("ParticleMainInfo"_hs)
			.prop(fq::reflect::prop::Name, "ParticleMainInfo")
			.data<&Particle::SetShapeInfo, &Particle::GetShapeInfo>("ShapeInfo"_hs)
			.prop(fq::reflect::prop::Name, "ShapeInfo")
			.data<&Particle::SetParticlesPerSecond, &Particle::GetParticlesPerSecond>("ParticlesPerSecond"_hs)
			.prop(fq::reflect::prop::Name, "ParticlesPerSecond")
			.data<&Particle::SetEmissionBursts, &Particle::GetEmissionBursts>("EmissionBursts"_hs)
			.prop(fq::reflect::prop::Name, "EmissionBursts")
			.data<&Particle::SetVelocityOverLifetimeData, &Particle::GetVelocityOverLifetimeData>("VelocityOverLifetime"_hs)
			.prop(fq::reflect::prop::Name, "VelocityOverLifetime")
			.data<&Particle::SetLimitVelocityOverLifeTimeData, &Particle::GetLimitVelocityOverLifeTimeData>("LimitVelocityOverLifetime"_hs)
			.prop(fq::reflect::prop::Name, "LimitVelocityOverLifetime")
			.data<&Particle::SetForceOverLifetimeData, &Particle::GetForceOverLifetimeData>("ForceOverLifetime"_hs)
			.prop(fq::reflect::prop::Name, "ForceOverLifetime")

			.data<&Particle::SetColorRatios, &Particle::GetColorRatios>("ColorRatios"_hs)
			.prop(fq::reflect::prop::Name, "ColorRatios")
			.prop(fq::reflect::prop::Comment, u8"xyz : 색상, w : 0 ~ 1로 정규화된 수명 범위(age/lifeTime), 최대 8개까지 추가 가능")
			.data<&Particle::SetAlphaRatios, &Particle::GetAlphaRatios>("AlphaRatios"_hs)
			.prop(fq::reflect::prop::Name, "AlphaRatios")
			.prop(fq::reflect::prop::Comment, u8"x : 알파, w : 0 ~ 1로 정규화된 수명 범위(age/lifeTime), 최대 8개까지 추가 가능")
			.data<&Particle::SetColorOverLifeTime, &Particle::GetColorOverLifeTime>("ColorOverLifeTime"_hs)
			.prop(fq::reflect::prop::Name, "ColorOverLifeTime")

			.data<&Particle::SetSizeOverLifetime, &Particle::GetSizeOverLifetime>("SizeOverLifetime"_hs)
			.prop(fq::reflect::prop::Name, "SizeOverLifetime")
			.data<&Particle::SetRotationOverLifetimeData, &Particle::GetRotationOverLifetimeData>("RotationOverLifetimeData"_hs)
			.prop(fq::reflect::prop::Name, "RotationOverLifetimeData")
			.data<&Particle::SetRenderData, &Particle::GetRenderData>("ParticleRenderData"_hs)
			.prop(fq::reflect::prop::Name, "ParticleRenderData")
			.data<&Particle::SetInstanceData, &Particle::GetInstanceData>("ParticleInstanceData"_hs)
			.prop(fq::reflect::prop::Name, "ParticleInstanceData")
			.data<&Particle::SetParticleMaterialInfo, &Particle::GetParticleMaterialInfo>("ParticleMaterialInfo"_hs)
			.prop(fq::reflect::prop::Name, "ParticleMaterialInfo")
			.base<Component>();

		entt::meta<fq::common::Material>()
			.type("Material"_hs)
			.prop(fq::reflect::prop::Name, "Material")
			.prop(fq::reflect::prop::POD)
			.data<&fq::common::Material::BaseColor>("BaseColor"_hs)
			.prop(fq::reflect::prop::Name, "BaseColor")
			.data<&fq::common::Material::Metalness>("Metalness"_hs)
			.prop(fq::reflect::prop::Name, "Metalness")
			.data<&fq::common::Material::Roughness>("Roughness"_hs)
			.prop(fq::reflect::prop::Name, "Roughness")
			.data<&fq::common::Material::BaseColorFileName>("BaseColorFileName"_hs)
			.prop(fq::reflect::prop::Name, "BaseColorFileName")
			.prop(fq::reflect::prop::RelativePath)
			.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
			.data<&fq::common::Material::MetalnessFileName>("MetalnessFileName"_hs)
			.prop(fq::reflect::prop::Name, "MetalnessFileName")
			.prop(fq::reflect::prop::RelativePath)
			.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
			.data<&fq::common::Material::RoughnessFileName>("RoughnessFileName"_hs)
			.prop(fq::reflect::prop::Name, "RoughnessFileName")
			.prop(fq::reflect::prop::RelativePath)
			.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
			.data<&fq::common::Material::NormalFileName>("NormalFileName"_hs)
			.prop(fq::reflect::prop::Name, "NormalFileName")
			.prop(fq::reflect::prop::RelativePath)
			.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
			.data<&fq::common::Material::EmissiveFileName>("EmissiveFileName"_hs)
			.prop(fq::reflect::prop::Name, "EmissiveFileName")
			.prop(fq::reflect::prop::RelativePath)
			.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
			.data<&fq::common::Material::OpacityFileName>("OpacityFileName"_hs)
			.prop(fq::reflect::prop::Name, "OpacityFileName")
			.prop(fq::reflect::prop::RelativePath)
			.prop(fq::reflect::prop::DragDrop, ".png/.jpg");
	}

	//////////////////////////////////////////////////////////////////////////
	//                             길찾기									//
	//////////////////////////////////////////////////////////////////////////
	entt::meta<NavigationAgent>()
		.type("NavigationAgent"_hs)
		.prop(fq::reflect::prop::Name, "NavigationAgent")
		.base<fq::game_module::Component>();

	//////////////////////////////////////////////////////////////////////////
	//                            데칼									//
	//////////////////////////////////////////////////////////////////////////
	entt::meta<fq::graphics::DecalInfo>()
		.type("DecalInfo"_hs)
		.prop(fq::reflect::prop::Name, "DecalInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::graphics::DecalInfo::Width>("Width"_hs)
		.prop(fq::reflect::prop::Name, "Width")
		.data<&fq::graphics::DecalInfo::Height>("Height"_hs)
		.prop(fq::reflect::prop::Name, "Height")
		.data<&fq::graphics::DecalInfo::Depth>("Depth"_hs)
		.prop(fq::reflect::prop::Name, "Depth")
		.data<&fq::graphics::DecalInfo::Pivot>("Pivot"_hs)
		.prop(fq::reflect::prop::Name, "Pivot")
		.data<&fq::graphics::DecalInfo::NormalThresholdInDegree>("NormalThresholdInDegree"_hs)
		.prop(fq::reflect::prop::Name, "NormalThresholdInDegree")
		.prop(fq::reflect::prop::Comment, u8"표면과 데칼 방향의 최대각도")
		.data<&fq::graphics::DecalInfo::Tiling>("Tiling"_hs)
		.prop(fq::reflect::prop::Name, "Tiling")
		.data<&fq::graphics::DecalInfo::Offset>("Offset"_hs)
		.prop(fq::reflect::prop::Name, "Offset")
		.data<&fq::graphics::DecalInfo::DebugRenderColor>("DebugRenderColor"_hs)
		.prop(fq::reflect::prop::Name, "DebugRenderColor")
		.data<&fq::graphics::DecalInfo::bIsRenderDebug>("bIsRenderDebug"_hs)
		.prop(fq::reflect::prop::Name, "bIsRenderDebug");

	entt::meta<Decal>()
		.type("Decal"_hs)
		.prop(fq::reflect::prop::Name, "Decal")
		.prop(fq::reflect::prop::Label, "Miscellaneous")
		.data<&Decal::SetDecalInfo, &Decal::GetDecalInfo>("DecalInfo"_hs)
		.prop(fq::reflect::prop::Name, "DecalInfo")
		.data<&Decal::SetDecalMaterialInfo, &Decal::GetDecalMaterialInfo>("DecalMaterialInfo"_hs)
		.prop(fq::reflect::prop::Name, "DecalMaterialInfo")
		.base<Component>();
	//////////////////////////////////////////////////////////////////////////
	//                             트레일									//
	//////////////////////////////////////////////////////////////////////////

	entt::meta<fq::graphics::TrailInfo::EAlignment>()
		.prop(fq::reflect::prop::Name, "TrailAlignment")
		.conv<std::underlying_type_t<fq::graphics::TrailInfo::EAlignment>>()
		.data<fq::graphics::TrailInfo::EAlignment::View>("View"_hs)
		.prop(fq::reflect::prop::Comment, u8"항상 카메라 위치를 바라보는 트레일 생성")
		.prop(fq::reflect::prop::Name, "View")
		.data<fq::graphics::TrailInfo::EAlignment::TransformZ>("TransformZ"_hs)
		.prop(fq::reflect::prop::Comment, u8"z축 방향에 정렬된 트레일을 생성")
		.prop(fq::reflect::prop::Name, "TransformZ");

	entt::meta<fq::graphics::TrailInfo::ETextureMode>()
		.prop(fq::reflect::prop::Name, "TrailTextureMode")
		.conv<std::underlying_type_t<fq::graphics::TrailInfo::ETextureMode>>()
		.data<fq::graphics::TrailInfo::ETextureMode::Stretch>("Stretch"_hs)
		.prop(fq::reflect::prop::Comment, u8"정점 간 거리를 기반으로 트레일 전체 길이에 대해 한 번 텍스처 매핑")
		.prop(fq::reflect::prop::Name, "Stretch")
		.data<fq::graphics::TrailInfo::ETextureMode::Tile>("Tile"_hs)
		.prop(fq::reflect::prop::Comment, u8"월드 공간 거리 10에 한 번씩 텍스처 매핑, 요청 시 월드 공간 거리 수정 가능")
		.prop(fq::reflect::prop::Name, "Tile")
		.data<fq::graphics::TrailInfo::ETextureMode::DistributePerSegment>("DistributePerSegment"_hs)
		.prop(fq::reflect::prop::Comment, u8"정점 간격이 균등하다고 가정한 후 트레일 전체 길이를 한 번에 매핑")
		.prop(fq::reflect::prop::Name, "DistributePerSegment")
		.data<fq::graphics::TrailInfo::ETextureMode::RepeatPerSegment>("RepeatPerSegment"_hs)
		.prop(fq::reflect::prop::Comment, u8"한 세그먼트마다 텍스처 매핑")
		.prop(fq::reflect::prop::Name, "RepeatPerSegment");

	entt::meta<fq::graphics::TrailInfo>()
		.type("TrailInfo"_hs)
		.prop(fq::reflect::prop::Name, "TrailInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::graphics::TrailInfo::Time>("Time"_hs)
		.prop(fq::reflect::prop::Name, "Time")
		.data<&fq::graphics::TrailInfo::WidthRatios>("WidthRatios"_hs)
		.prop(fq::reflect::prop::Name, "WidthRatios")
		.data<&fq::graphics::TrailInfo::MinVertexDistance>("MinVertexDistance"_hs)
		.prop(fq::reflect::prop::Name, "MinVertexDistance")
		.prop(fq::reflect::prop::Comment, u8"정점이 추가될 거리")
		.data<&fq::graphics::TrailInfo::VertexDivisionCount>("VertexDivisionCount"_hs)
		.prop(fq::reflect::prop::Name, "VertexDivisionCount")
		.prop(fq::reflect::prop::Comment, u8"두 선분 사이에 추가될 정점 수")
		.data<&fq::graphics::TrailInfo::bIsEmit>("bIsEmit"_hs)
		.prop(fq::reflect::prop::Name, "bIsEmit")
		.data<&fq::graphics::TrailInfo::ColorRatios>("ColorRatios"_hs)
		.prop(fq::reflect::prop::Name, "ColorRatios")
		.data<&fq::graphics::TrailInfo::AlphaRatios>("AlphaRatios"_hs)
		.prop(fq::reflect::prop::Name, "AlphaRatios")
		.data<&fq::graphics::TrailInfo::AlignmentType>("AlignmentType"_hs)
		.prop(fq::reflect::prop::Name, "AlignmentType")
		.data<&fq::graphics::TrailInfo::TextureMode>("TextureMode"_hs)
		.prop(fq::reflect::prop::Name, "TextureMode");

	entt::meta<Trail>()
		.type("Trail"_hs)
		.prop(fq::reflect::prop::Name, "Trail")
		.prop(fq::reflect::prop::Label, "Miscellaneous")
		.data<&Trail::SetTrailInfo, &Trail::GetTrailInfo>("TrailInfo"_hs)
		.prop(fq::reflect::prop::Name, "TrailInfo")
		.data<&Trail::SetWidthRatios, &Trail::GetWidthRatios>("WidthRatios"_hs)
		.prop(fq::reflect::prop::Name, "WidthRatios")
		.prop(fq::reflect::prop::Comment, u8"x : 크기, y : 0 ~ 1로 정규화된 수명 범위(age/lifeTime)")
		.data<&Trail::SetColorRatios, &Trail::GetColorRatios>("ColorRatios"_hs)
		.prop(fq::reflect::prop::Name, "ColorRatios")
		.prop(fq::reflect::prop::Comment, u8"xyz : 색상, w : 0 ~ 1로 정규화된 수명 범위(age/lifeTime)")
		.data<&Trail::SetAlphaRatios, &Trail::GetAlphaRatios>("AlphaRatios"_hs)
		.prop(fq::reflect::prop::Name, "AlphaRatios")
		.prop(fq::reflect::prop::Comment, u8"x : 알파, w : 0 ~ 1로 정규화된 수명 범위(age/lifeTime)")
		.data<&Trail::SetParticleMaterialInfo, &Trail::GetParticleMaterialInfo>("TrailMaterialInfo"_hs)
		.prop(fq::reflect::prop::Name, "TrailMaterialInfo")
		.base<Component>();

	//////////////////////////////////////////////////////////////////////////
	//                             머테리얼									//
	//////////////////////////////////////////////////////////////////////////

	entt::meta<fq::graphics::ESampleMode>()
		.prop(fq::reflect::prop::Name, "MaterialSampleMode")
		.conv<std::underlying_type_t<fq::graphics::ESampleMode>>()
		.data<fq::graphics::ESampleMode::Clamp>("Clamp"_hs)
		.prop(fq::reflect::prop::Name, "Clamp")
		.data<fq::graphics::ESampleMode::Wrap>("Wrap"_hs)
		.prop(fq::reflect::prop::Name, "Wrap");

	entt::meta<fq::graphics::ERasterizeMode>()
		.prop(fq::reflect::prop::Name, "MaterialRasterizeMode")
		.conv<std::underlying_type_t<fq::graphics::ParticleMaterialInfo::ERenderMode>>()
		.data<fq::graphics::ERasterizeMode::BackFaceClip>("BackFaceClip"_hs)
		.prop(fq::reflect::prop::Name, "BackFaceClip")
		.data<fq::graphics::ERasterizeMode::TwoSide>("TwoSide"_hs)
		.prop(fq::reflect::prop::Name, "TwoSide");

	entt::meta<fq::graphics::MaterialInfo::ERenderMode>()
		.prop(fq::reflect::prop::Name, "MaterialInfoERenderMode")
		.conv<std::underlying_type_t<fq::graphics::ParticleMaterialInfo::ERenderMode>>()
		.data<fq::graphics::MaterialInfo::ERenderMode::Opaque>("Opaque"_hs)
		.prop(fq::reflect::prop::Name, "Opaque")
		.data<fq::graphics::MaterialInfo::ERenderMode::Transparent>("Transparent"_hs)
		.prop(fq::reflect::prop::Name, "Transparent");

	entt::meta<fq::graphics::MaterialInfo>()
		.type("MaterialInfo"_hs)
		.prop(fq::reflect::prop::Name, "MaterialInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::graphics::MaterialInfo::RenderModeType>("RenderModeType"_hs)
		.prop(fq::reflect::prop::Name, "RenderModeType")
		.data<&fq::graphics::MaterialInfo::BaseColor>("BaseColor"_hs)
		.prop(fq::reflect::prop::Name, "BaseColor")
		.data<&fq::graphics::MaterialInfo::Metalness>("Metalness"_hs)
		.prop(fq::reflect::prop::Name, "Metalness")
		.data<&fq::graphics::MaterialInfo::Roughness>("Roughness"_hs)
		.prop(fq::reflect::prop::Name, "Roughness")
		.data<&fq::graphics::MaterialInfo::EmissiveColor>("EmissiveColor"_hs)
		.prop(fq::reflect::prop::Name, "EmissiveColor")
		.data<&fq::graphics::MaterialInfo::BaseColorFileName>("BaseColorFileName"_hs)
		.prop(fq::reflect::prop::Name, "BaseColorFileName")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.prop(fq::reflect::prop::RelativePath)
		.data<&fq::graphics::MaterialInfo::MetalnessFileName>("MetalnessFileName"_hs)
		.prop(fq::reflect::prop::Name, "MetalnessFileName")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.prop(fq::reflect::prop::RelativePath)
		.data<&fq::graphics::MaterialInfo::RoughnessFileName>("RoughnessFileName"_hs)
		.prop(fq::reflect::prop::Name, "RoughnessFileName")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.prop(fq::reflect::prop::RelativePath)
		.data<&fq::graphics::MaterialInfo::NormalFileName>("NormalFileName"_hs)
		.prop(fq::reflect::prop::Name, "NormalFileName")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.prop(fq::reflect::prop::RelativePath)
		.data<&fq::graphics::MaterialInfo::EmissiveFileName>("EmissiveFileName"_hs)
		.prop(fq::reflect::prop::Name, "EmissiveFileName")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.prop(fq::reflect::prop::RelativePath)
		.data<&fq::graphics::MaterialInfo::bUseBaseColor>("bUseBaseColor"_hs)
		.prop(fq::reflect::prop::Name, "bUseBaseColor")
		.data<&fq::graphics::MaterialInfo::bUseMetalness>("bUseMetalness"_hs)
		.prop(fq::reflect::prop::Name, "bUseMetalness")
		.data<&fq::graphics::MaterialInfo::bUseRoughness>("bUseRoughness"_hs)
		.prop(fq::reflect::prop::Name, "bUseRoughness")
		.data<&fq::graphics::MaterialInfo::bUseNormalness>("bUseNormalness"_hs)
		.prop(fq::reflect::prop::Name, "bUseNormalness")
		.data<&fq::graphics::MaterialInfo::bIsUsedEmissive>("bIsUsedEmissive"_hs)
		.prop(fq::reflect::prop::Name, "bIsUsedEmissive")
		.data<&fq::graphics::MaterialInfo::Tiling>("Tiling"_hs)
		.prop(fq::reflect::prop::Name, "Tiling")
		.data<&fq::graphics::MaterialInfo::Offset>("Offset"_hs)
		.prop(fq::reflect::prop::Name, "Offset")
		.data<&fq::graphics::MaterialInfo::AlphaCutoff>("AlphaCutoff"_hs)
		.prop(fq::reflect::prop::Comment, u8"알파 클립(알파 테스팅)에 사용할 알파값")
		.prop(fq::reflect::prop::Name, "AlphaCutoff")
		.data<&fq::graphics::MaterialInfo::RasterizeType>("RasterizeType"_hs)
		.prop(fq::reflect::prop::Name, "RasterizeType")
		.data<&fq::graphics::MaterialInfo::SampleType>("SampleType"_hs)
		.prop(fq::reflect::prop::Name, "SampleType")
		.data<&fq::graphics::MaterialInfo::EmissiveIntensity>("EmissiveIntensity"_hs)
		.prop(fq::reflect::prop::Name, "EmissiveIntensity");

	entt::meta<fq::graphics::ParticleMaterialInfo::ERenderMode>()
		.prop(fq::reflect::prop::Name, "ParticleMaterialInfoERenderMode")
		.conv<std::underlying_type_t<fq::graphics::ParticleMaterialInfo::ERenderMode>>()
		.data<fq::graphics::ParticleMaterialInfo::ERenderMode::Additive>("Additive"_hs)
		.prop(fq::reflect::prop::Name, "Additive")
		.data<fq::graphics::ParticleMaterialInfo::ERenderMode::Subtractive>("Subtractive"_hs)
		.prop(fq::reflect::prop::Name, "Subtractive")
		.data<fq::graphics::ParticleMaterialInfo::ERenderMode::Modulate>("Modulate"_hs)
		.prop(fq::reflect::prop::Name, "Modulate")
		.data<fq::graphics::ParticleMaterialInfo::ERenderMode::AlphaBlend>("AlphaBlend"_hs)
		.prop(fq::reflect::prop::Name, "AlphaBlend");


	entt::meta<fq::graphics::ParticleMaterialInfo::EColorMode>()
		.prop(fq::reflect::prop::Name, "ParticleMaterialInfoEColorMode")
		.conv<std::underlying_type_t<fq::graphics::ParticleMaterialInfo::EColorMode>>()
		.data<fq::graphics::ParticleMaterialInfo::EColorMode::Multiply>("Multiply"_hs)
		.prop(fq::reflect::prop::Name, "Multiply")
		.prop(fq::reflect::prop::Comment, u8"텍스처 색상 * 정의된 색상")
		.data<fq::graphics::ParticleMaterialInfo::EColorMode::Additive>("Additive"_hs)
		.prop(fq::reflect::prop::Name, "Additive")
		.prop(fq::reflect::prop::Comment, u8"텍스처 색상 + 정의된 색상")
		.data<fq::graphics::ParticleMaterialInfo::EColorMode::Subtractive>("Subtractive"_hs)
		.prop(fq::reflect::prop::Name, "Subtractive")
		.prop(fq::reflect::prop::Comment, u8"텍스처 색상 - 정의된 색상")
		.data<fq::graphics::ParticleMaterialInfo::EColorMode::Overlay>("Overlay"_hs)
		.prop(fq::reflect::prop::Name, "Overlay")
		.prop(fq::reflect::prop::Comment, u8"정의된 색상이 0.5보다 작으면 2 * 텍스처 색상 * 정의된 색상")
		.data<fq::graphics::ParticleMaterialInfo::EColorMode::Color>("Color"_hs)
		.prop(fq::reflect::prop::Name, "Color")
		.prop(fq::reflect::prop::Comment, u8"정의된 색상의 명도, 텍스처의 색상 채도")
		.data<fq::graphics::ParticleMaterialInfo::EColorMode::Difference>("Difference"_hs)
		.prop(fq::reflect::prop::Name, "Difference")
		.prop(fq::reflect::prop::Comment, u8"텍스처 색상 - 정의된 색상의 절댓값");


	entt::meta<fq::graphics::ParticleMaterialInfo>()
		.type("ParticleMaterialInfo"_hs)
		.prop(fq::reflect::prop::Name, "ParticleMaterialInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::graphics::ParticleMaterialInfo::RenderModeType>("RenderModeType"_hs)
		.prop(fq::reflect::prop::Name, "RenderModeType")
		.data<&fq::graphics::ParticleMaterialInfo::ColorModeType>("ColorModeType"_hs)
		.prop(fq::reflect::prop::Name, "ColorModeType")
		.data<&fq::graphics::ParticleMaterialInfo::BaseColor>("BaseColor"_hs)
		.prop(fq::reflect::prop::Name, "BaseColor")
		.data<&fq::graphics::ParticleMaterialInfo::EmissiveColor>("EmissiveColor"_hs)
		.prop(fq::reflect::prop::Name, "EmissiveColor")
		.data<&fq::graphics::ParticleMaterialInfo::BaseColorFileName>("BaseColorFileName"_hs)
		.prop(fq::reflect::prop::Name, "BaseColorFileName")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.prop(fq::reflect::prop::RelativePath)
		.data<&fq::graphics::ParticleMaterialInfo::EmissiveFileName>("EmissiveFileName"_hs)
		.prop(fq::reflect::prop::Name, "EmissiveFileName")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.prop(fq::reflect::prop::RelativePath)
		.data<&fq::graphics::ParticleMaterialInfo::bIsUsedBaseColor>("bIsUsedBaseColor"_hs)
		.prop(fq::reflect::prop::Name, "bIsUsedBaseColor")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.data<&fq::graphics::ParticleMaterialInfo::bIsUsedEmissive>("bIsUsedEmissive"_hs)
		.prop(fq::reflect::prop::Name, "bIsUsedEmissive")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.data<&fq::graphics::ParticleMaterialInfo::Tiling>("Tiling"_hs)
		.prop(fq::reflect::prop::Name, "Tiling")
		.data<&fq::graphics::ParticleMaterialInfo::Offset>("Offset"_hs)
		.prop(fq::reflect::prop::Name, "Offset")
		.data<&fq::graphics::ParticleMaterialInfo::bUseMultiplyAlpha>("UseMultiplyAlpha"_hs)
		.prop(fq::reflect::prop::Name, "UseMultiplyAlpha")
		.prop(fq::reflect::prop::Comment, u8"알파 값을 알베도에 곱할지 여부")
		.data<&fq::graphics::ParticleMaterialInfo::AlphaCutoff>("AlphaCutoff"_hs)
		.prop(fq::reflect::prop::Name, "AlphaCutoff")
		.prop(fq::reflect::prop::Comment, u8"알파 클립(알파 테스팅)에 사용할 알파값")
		.data<&fq::graphics::ParticleMaterialInfo::bIsTwoSide>("UseTwoSide"_hs)
		.prop(fq::reflect::prop::Name, "UseTwoSide")
		.prop(fq::reflect::prop::Comment, u8"양방향 그리기 사용 여부");

	entt::meta<fq::graphics::DecalMaterialInfo>()
		.type("DecalMaterialInfo"_hs)
		.prop(fq::reflect::prop::Name, "DecalMaterialInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::graphics::DecalMaterialInfo::BaseColor>("BaseColor"_hs)
		.prop(fq::reflect::prop::Name, "BaseColor")
		.data<&fq::graphics::DecalMaterialInfo::EmissiveColor>("EmissiveColor"_hs)
		.prop(fq::reflect::prop::Name, "EmissiveColor")
		.data<&fq::graphics::DecalMaterialInfo::BaseColorFileName>("BaseColorFileName"_hs)
		.prop(fq::reflect::prop::Name, "BaseColorFileName")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.prop(fq::reflect::prop::RelativePath)
		.data<&fq::graphics::DecalMaterialInfo::NormalFileName>("NormalFileName"_hs)
		.prop(fq::reflect::prop::Name, "NormalFileName")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.prop(fq::reflect::prop::RelativePath)
		.data<&fq::graphics::DecalMaterialInfo::EmissiveFileName>("EmissiveFileName"_hs)
		.prop(fq::reflect::prop::Name, "EmissiveFileName")
		.prop(fq::reflect::prop::DragDrop, ".png/.jpg")
		.prop(fq::reflect::prop::RelativePath)
		.data<&fq::graphics::DecalMaterialInfo::bUseBaseColor>("bUseBaseColor"_hs)
		.prop(fq::reflect::prop::Name, "bUseBaseColor")
		.data<&fq::graphics::DecalMaterialInfo::bUseNormalness>("bUseNormalness"_hs)
		.prop(fq::reflect::prop::Name, "bUseNormalness")
		.data<&fq::graphics::DecalMaterialInfo::bIsUsedEmissive>("bIsUsedEmissive"_hs)
		.prop(fq::reflect::prop::Name, "bIsUsedEmissive")
		.data<&fq::graphics::DecalMaterialInfo::NormalBlend>("NormalBlend"_hs)
		.prop(fq::reflect::prop::Comment, "u8노말 블렌딩 세기")
		.prop(fq::reflect::prop::Name, "NormalBlend")
		.data<&fq::graphics::DecalMaterialInfo::AlphaCutoff>("AlphaCutoff"_hs)
		.prop(fq::reflect::prop::Comment, u8"알파 클립(알파 테스팅)에 사용할 알파값")
		.prop(fq::reflect::prop::Name, "AlphaCutoff");

	entt::meta<NavigationMeshLoader>()
		.type("NavigationMeshLoader"_hs)
		.prop(fq::reflect::prop::Name, "NavigationMeshLoader")
		.data<&NavigationMeshLoader::SetNavigationMeshPath, &NavigationMeshLoader::GetNavigationMeshPath>("NavigationMeshPath"_hs)
		.prop(fq::reflect::prop::Name, "NavigationMeshPath")
		.prop(fq::reflect::prop::DragDrop, ".Nav")
		.prop(fq::reflect::prop::RelativePath)
		.base<fq::game_module::Component>();

	//////////////////////////////////////////////////////////////////////////
	//                            포스트 프로세싱							//
	//////////////////////////////////////////////////////////////////////////
	entt::meta<fq::graphics::PostProcessingInfo>()
		.type("PostProcessingInfo"_hs)
		.prop(fq::reflect::prop::Name, "PostProcessingInfo")
		.prop(fq::reflect::prop::POD)
		.data<&fq::graphics::PostProcessingInfo::Gamma>("Gamma"_hs)
		.prop(fq::reflect::prop::Name, "Gamma")
		.data<&fq::graphics::PostProcessingInfo::Exposure>("Exposure"_hs)
		.prop(fq::reflect::prop::Name, "Exposure")
		.data<&fq::graphics::PostProcessingInfo::Contrast>("Contrast"_hs)
		.prop(fq::reflect::prop::Name, "Contrast")
		.data<&fq::graphics::PostProcessingInfo::Saturation>("Saturation"_hs)
		.prop(fq::reflect::prop::Name, "Saturation")
		.data<&fq::graphics::PostProcessingInfo::bUseColorAdjustment>("bUseColorAdjustment"_hs)
		.prop(fq::reflect::prop::Name, "bUseColorAdjustment")
		.data<&fq::graphics::PostProcessingInfo::BloomIntensity>("BloomIntensity"_hs)
		.prop(fq::reflect::prop::Name, "BloomIntensity")
		.data<&fq::graphics::PostProcessingInfo::BloomThreshold>("BloomThreshold"_hs)
		.prop(fq::reflect::prop::Name, "BloomThreshold")
		.data<&fq::graphics::PostProcessingInfo::BloomScatter>("BloomScatter"_hs)
		.prop(fq::reflect::prop::Name, "BloomScatter")
		.data<&fq::graphics::PostProcessingInfo::BloomColorTint>("BloomColorTint"_hs)
		.prop(fq::reflect::prop::Name, "BloomColorTint")
		.data<&fq::graphics::PostProcessingInfo::bUseBloomScatter>("bUseBloomScatter"_hs)
		.prop(fq::reflect::prop::Name, "bUseBloomScatter")
		.data<&fq::graphics::PostProcessingInfo::bUseBloom>("bUseBloom"_hs)
		.prop(fq::reflect::prop::Name, "bUseBloom")
		.data<&fq::graphics::PostProcessingInfo::ShadowColor>("ShadowColor"_hs)
		.prop(fq::reflect::prop::Name, "ShadowColor")
		.data<&fq::graphics::PostProcessingInfo::HighlightColor>("HighlightColor"_hs)
		.prop(fq::reflect::prop::Name, "HighlightColor")
		.data<&fq::graphics::PostProcessingInfo::Balance>("Balance"_hs)
		.prop(fq::reflect::prop::Name, "Balance")
		.data<&fq::graphics::PostProcessingInfo::bUseSplitToning>("bUseSplitToning"_hs)
		.prop(fq::reflect::prop::Name, "bUseSplitToning")
		.data<&fq::graphics::PostProcessingInfo::VignettColor>("VignettColor"_hs)
		.prop(fq::reflect::prop::Name, "VignettColor")
		.data<&fq::graphics::PostProcessingInfo::VignettRadius>("VignettRadius"_hs)
		.prop(fq::reflect::prop::Name, "VignettRadius")
		.data<&fq::graphics::PostProcessingInfo::VignettSmoothness>("VignettSmoothness"_hs)
		.prop(fq::reflect::prop::Name, "VignettSmoothness")
		.data<&fq::graphics::PostProcessingInfo::bUseVignett>("bUseVignett"_hs)
		.prop(fq::reflect::prop::Name, "bUseVignett")
		.data<&fq::graphics::PostProcessingInfo::bUseToneMapping>("bUseToneMapping"_hs)
		.prop(fq::reflect::prop::Name, "bUseToneMapping")
		.data<&fq::graphics::PostProcessingInfo::fogVisibleArea>("FogVisibleArea"_hs)
		.prop(fq::reflect::prop::Name, "FogVisibleArea")
		.data<&fq::graphics::PostProcessingInfo::fogColor>("FogColor"_hs)
		.prop(fq::reflect::prop::Name, "FogColor")
		.data<&fq::graphics::PostProcessingInfo::bUseFog>("bUseFog"_hs)
		.prop(fq::reflect::prop::Name, "bUseFog");;

	entt::meta<PostProcessing>()
		.type("PostProcessing"_hs)
		.prop(fq::reflect::prop::Name, "PostProcessing")
		.prop(fq::reflect::prop::Label, "Miscellaneous")
		.data<&PostProcessing::SetPostProcessingInfo, &PostProcessing::GetPostProcessingInfo>("PostProcessingInfo"_hs)
		.prop(fq::reflect::prop::Name, "PostProcessingInfo")
		.base<fq::game_module::Component>();

	//////////////////////////////////////////////////////////////////////////
	//                            StateEvent                                //
	//////////////////////////////////////////////////////////////////////////
	entt::meta<StateEvent::InstantiatePrefab>()
		.type("InstantiatePrefab"_hs)
		.prop(fq::reflect::prop::Name, "InstantiatePrefab")
		.prop(fq::reflect::prop::POD)
		.data<&StateEvent::InstantiatePrefab::FunctionName>("FunctionName"_hs)
		.prop(fq::reflect::prop::Name, "FunctionName")
		.data<&StateEvent::InstantiatePrefab::PrefabResourceData>("PrefabResource"_hs)
		.prop(fq::reflect::prop::Name, "PrefabResource")
		.prop(fq::reflect::prop::DragDrop, ".prefab")
		.prop(fq::reflect::prop::RelativePath)
		.data<&StateEvent::InstantiatePrefab::bIsFollowingParentPosition>("IsFollowingParentPosition"_hs)
		.prop(fq::reflect::prop::Name, "IsFollowingParentPosition")
		.prop(fq::reflect::prop::Comment, u8"부모 위치를 따라갈지 여부")
		.data<&StateEvent::InstantiatePrefab::bUseAutoDelete>("UseAutoDelete"_hs)
		.prop(fq::reflect::prop::Name, "UseAutoDelete")
		.prop(fq::reflect::prop::Comment, u8"자동 삭제 여부")
		.data<&StateEvent::InstantiatePrefab::bUseDeleteByStateEnd>("UseDeleteByStateEnd"_hs)
		.prop(fq::reflect::prop::Name, "UseDeleteByStateEnd")
		.prop(fq::reflect::prop::Comment, u8"상태 종료 시 삭제 여부")
		.data<&StateEvent::InstantiatePrefab::DeleteTime>("DeleteTime"_hs)
		.prop(fq::reflect::prop::Name, "DeleteTime")
		.prop(fq::reflect::prop::Comment, u8"자동 삭제 수명 시간")
		.data<&StateEvent::InstantiatePrefab::Scale>("Scale"_hs)
		.prop(fq::reflect::prop::Name, "Scale")
		.prop(fq::reflect::prop::Comment, u8"생성 로컬 스케일")
		.data<&StateEvent::InstantiatePrefab::Translate>("Translate"_hs)
		.prop(fq::reflect::prop::Name, "Translate")
		.prop(fq::reflect::prop::Comment, u8"생성 로컬 오프셋")
		.data<&StateEvent::InstantiatePrefab::RandomRange>("RandomRange"_hs)
		.prop(fq::reflect::prop::Name, "RandomRange")
		.prop(fq::reflect::prop::Comment, u8"생성 랜덤 범위");

	entt::meta<StateEvent::PlaySoundInfo>()
		.type("PlaySoundInfo"_hs)
		.prop(fq::reflect::prop::Name, "PlaySoundInfo")
		.prop(fq::reflect::prop::POD)
		.data<&StateEvent::PlaySoundInfo::FunctionName>("FunctionName"_hs)
		.prop(fq::reflect::prop::Name, "FunctionName")
		.data<&StateEvent::PlaySoundInfo::SoundPath>("PrefabResource"_hs)
		.prop(fq::reflect::prop::Name, "PrefabResource")
		.prop(fq::reflect::prop::DragDrop, ".mp3/.wav")
		.prop(fq::reflect::prop::RelativePath)
		.data<&StateEvent::PlaySoundInfo::bUseAutoDelete>("UseAutoDelete"_hs)
		.prop(fq::reflect::prop::Name, "UseAutoDelete")
		.prop(fq::reflect::prop::Comment, u8"자동 삭제 여부")
		.data<&StateEvent::PlaySoundInfo::bUseDeleteByStateEnd>("UseDeleteByStateEnd"_hs)
		.prop(fq::reflect::prop::Name, "UseDeleteByStateEnd")
		.prop(fq::reflect::prop::Comment, u8"상태 종료 시 삭제 여부")
		.data<&StateEvent::PlaySoundInfo::DeleteTime>("DeleteTime"_hs)
		.prop(fq::reflect::prop::Name, "DeleteTime")
		.prop(fq::reflect::prop::Comment, u8"자동 삭제 수명 시간")
		.data<&StateEvent::PlaySoundInfo::bIsLoop>("bIsLoop"_hs)
		.prop(fq::reflect::prop::Name, "bIsLoop")
		.prop(fq::reflect::prop::Comment, u8"반복 여부")
		.data<&StateEvent::PlaySoundInfo::Channel>("Channel"_hs)
		.prop(fq::reflect::prop::Name, "Channel")
		.prop(fq::reflect::prop::Comment, u8"사운드 채널 (0 ~ 31)");

	entt::meta<StateEvent>()
		.type("StateEvent"_hs)
		.prop(fq::reflect::prop::Name, "StateEvent")
		.prop(fq::reflect::prop::Label, "Miscellaneous")
		.data<&StateEvent::mInstantiatePrefabs>("InstantiatePrefabInfos"_hs)
		.prop(fq::reflect::prop::Name, "InstantiatePrefabInfos")
		.data<&StateEvent::mPlayerSoundInfos>("PlayerSoundInfos"_hs)
		.prop(fq::reflect::prop::Name, "PlayerSoundInfos")
		.base<fq::game_module::Component>();
}
